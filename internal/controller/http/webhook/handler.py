from typing import Annotated

from aiogram import Bot, Dispatcher
from aiogram.types import Update
from aiogram_dialog import BgManagerFactory, ShowMode, StartMode
from fastapi import Header
from starlette.responses import JSONResponse

from internal import interface, model
from pkg.log_wrapper import auto_log
from pkg.trace_wrapper import traced_method
from .model import *


class TelegramWebhookController(interface.ITelegramWebhookController):
    def __init__(
            self,
            tel: interface.ITelemetry,
            dp: Dispatcher,
            bot: Bot,
            state_service: interface.IStateService,
            dialog_bg_factory: BgManagerFactory,
            domain: str,
            prefix: str,
            interserver_secret_key: str
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()

        self.dp = dp
        self.bot = bot
        self.state_service = state_service
        self.dialog_bg_factory = dialog_bg_factory

        self.domain = domain
        self.prefix = prefix
        self.interserver_secret_key = interserver_secret_key

    @traced_method()
    async def bot_webhook(
            self,
            update: dict,
            x_telegram_bot_api_secret_token: Annotated[str | None, Header()] = None
    ):
        if x_telegram_bot_api_secret_token != "secret":
            return {"status": "error", "message": "Wrong secret token !"}

        telegram_update = Update(**update)
        await self.dp.feed_webhook_update(
            bot=self.bot,
            update=telegram_update
        )
        return None

    @auto_log()
    @traced_method()
    async def bot_set_webhook(self):
        await self.bot.set_webhook(
            f'https://{self.domain}{self.prefix}/update',
            secret_token='secret',
            allowed_updates=["message", "callback_query"],
        )

    @auto_log()
    @traced_method()
    async def notify_employee_added(
            self,
            body: EmployeeNotificationBody,
    ) -> JSONResponse:
        if body.interserver_secret_key != self.interserver_secret_key:
            self.logger.warning("–ù–µ –≤–µ—Ä–Ω—ã–π –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á")
            return JSONResponse(
                content={"status": "error", "message": "Wrong secret token !"},
                status_code=401
            )

        user_state = (await self.state_service.state_by_account_id(
            body.account_id
        ))[0]

        await self.state_service.change_user_state(
            user_state.id,
            organization_id=body.organization_id
        )

        await self.bot.send_message(
            chat_id=user_state.tg_chat_id,
            text=self._format_notification_message(body),
            parse_mode="HTML"
        )

        return JSONResponse(
            content={"status": "ok"},
            status_code=200
        )

    @auto_log()
    @traced_method()
    async def notify_vizard_video_cut_generated(
            self,
            body: NotifyVizardVideoCutGenerated,
    ) -> JSONResponse:
        if body.interserver_secret_key != self.interserver_secret_key:
            self.logger.warning("–ù–µ –≤–µ—Ä–Ω—ã–π –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á")
            return JSONResponse(
                content={"status": "error", "message": "Wrong secret token !"},
                status_code=401
            )

        user_state = (await self.state_service.state_by_account_id(
            body.account_id
        ))[0]

        await self.state_service.create_vizard_video_cut_alert(
            state_id=user_state.id,
            youtube_video_reference=body.youtube_video_reference,
            video_count=body.video_count,
        )

        if user_state.can_show_alerts:
            self.logger.info("–ü–æ–∫–∞–∑—ã–≤–∞—é –∞–ª–µ—Ä—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            dialog_manager = self.dialog_bg_factory.bg(
                bot=self.bot,
                user_id=user_state.tg_chat_id,
                chat_id=user_state.tg_chat_id,
            )
            await self.state_service.change_user_state(
                user_state.id,
                can_show_alerts=False,
            )
            await dialog_manager.start(
                model.AlertsStates.video_generated_alert,
                mode=StartMode.RESET_STACK,
                show_mode=ShowMode.DELETE_AND_SEND
            )

        return JSONResponse(
            content={"status": "ok"},
            status_code=200
        )

    @auto_log()
    @traced_method()
    async def notify_publication_approved_alert(
            self,
            body: NotifyPublicationApprovedBody,
    ) -> JSONResponse:
        if body.interserver_secret_key != self.interserver_secret_key:
            self.logger.warning("–ù–µ –≤–µ—Ä–Ω—ã–π –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á")
            return JSONResponse(
                content={"status": "error", "message": "Wrong secret token !"},
                status_code=401
            )

        user_state = (await self.state_service.state_by_account_id(
            body.account_id
        ))[0]

        await self.state_service.create_publication_approved_alert(
            state_id=user_state.id,
            publication_id=body.publication_id,
        )

        if user_state.can_show_alerts:
            self.logger.info("–ü–æ–∫–∞–∑—ã–≤–∞—é –∞–ª–µ—Ä—Ç –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            dialog_manager = self.dialog_bg_factory.bg(
                bot=self.bot,
                user_id=user_state.tg_chat_id,
                chat_id=user_state.tg_chat_id,
            )
            await self.state_service.change_user_state(
                user_state.id,
                can_show_alerts=False,
            )
            await dialog_manager.start(
                model.AlertsStates.publication_approved_alert,
                mode=StartMode.RESET_STACK,
                show_mode=ShowMode.DELETE_AND_SEND
            )

        return JSONResponse(
            content={"status": "ok"},
            status_code=200
        )

    @auto_log()
    @traced_method()
    async def notify_publication_rejected_alert(
            self,
            body: NotifyPublicationRejectedBody,
    ) -> JSONResponse:
        if body.interserver_secret_key != self.interserver_secret_key:
            self.logger.warning("–ù–µ –≤–µ—Ä–Ω—ã–π –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á")
            return JSONResponse(
                content={"status": "error", "message": "Wrong secret token !"},
                status_code=401
            )

        user_state = (await self.state_service.state_by_account_id(
            body.account_id
        ))[0]

        await self.state_service.create_publication_rejected_alert(
            state_id=user_state.id,
            publication_id=body.publication_id,
        )

        if user_state.can_show_alerts:
            self.logger.info("–ü–æ–∫–∞–∑—ã–≤–∞—é –∞–ª–µ—Ä—Ç –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            dialog_manager = self.dialog_bg_factory.bg(
                bot=self.bot,
                user_id=user_state.tg_chat_id,
                chat_id=user_state.tg_chat_id,
            )
            await self.state_service.change_user_state(
                user_state.id,
                can_show_alerts=False,
            )
            await dialog_manager.start(
                model.AlertsStates.publication_rejected_alert,
                mode=StartMode.RESET_STACK,
                show_mode=ShowMode.DELETE_AND_SEND
            )

        return JSONResponse(
            content={"status": "ok"},
            status_code=200
        )

    @auto_log()
    @traced_method()
    async def set_cache_file(
            self,
            body: SetCacheFileBody,
    ) -> JSONResponse:
        if body.interserver_secret_key != self.interserver_secret_key:
            self.logger.warning("–ù–µ –≤–µ—Ä–Ω—ã–π –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á")
            return JSONResponse(
                content={"status": "error", "message": "Wrong secret token !"},
                status_code=401
            )

        await self.state_service.set_cache_file(
            filename=body.filename,
            file_id=body.file_id
        )

        return JSONResponse(
            content={},
            status_code=200
        )

    def _format_notification_message(self, body: EmployeeNotificationBody) -> str:
        role_names = {
            "employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
            "moderator": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "owner": "–í–ª–∞–¥–µ–ª–µ—Ü"
        }
        role_display = role_names.get(body.role, body.role)

        message_text = (
            f"üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!</b>\n\n"
            f"–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:\n"
            f"üè∑ –í–∞—à–∞ —Ä–æ–ª—å: <b>{role_display}</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
        )

        return message_text

    def _get_chat_id(self, telegram_update: Update) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç chat_id –∏–∑ Telegram Update"""
        if telegram_update.message:
            return telegram_update.message.chat.id
        elif telegram_update.callback_query and telegram_update.callback_query.message:
            return telegram_update.callback_query.message.chat.id
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å chat_id –∏–∑ Update")

    async def _recovery_start_functionality(self, chat_id: int, tg_username: str):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /start"""
        try:
            self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª /start")

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = await self.state_service.state_by_id(chat_id)
            if not user_state:
                await self.state_service.create_state(chat_id, tg_username)
                user_state = await self.state_service.state_by_id(chat_id)

            user_state = user_state[0]

            # –°–æ–∑–¥–∞–µ–º dialog_manager –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            dialog_manager = self.dialog_bg_factory.bg(
                bot=self.bot,
                user_id=chat_id,
                chat_id=chat_id,
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_state.organization_id == 0 and user_state.account_id == 0:
                target_state = model.AuthStates.user_agreement
                self.logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif user_state.organization_id == 0 and user_state.account_id != 0:
                target_state = model.AuthStates.access_denied
                self.logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                target_state = model.MainMenuStates.main_menu
                self.logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥
            await dialog_manager.start(
                target_state,
                mode=StartMode.RESET_STACK
            )

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.state_service.change_user_state(
                state_id=user_state.id,
                can_show_alerts=True
            )

            self.logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {target_state}",
                {"tg_chat_id": chat_id}
            )

        except Exception as recovery_err:
            self.logger.error(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}",
                {
                    "error": str(recovery_err),
                    "traceback": traceback.format_exc(),
                    "tg_chat_id": chat_id,
                }
            )

            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            try:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã."
                )
            except Exception as msg_err:
                self.logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}",
                    {
                        "error": str(msg_err),
                        "tg_chat_id": chat_id,
                    }
                )
