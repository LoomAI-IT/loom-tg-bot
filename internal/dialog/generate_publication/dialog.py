from aiogram import F
from aiogram_dialog import Window, Dialog, ShowMode
from aiogram_dialog.widgets.text import Const, Format, Multi, Case
from aiogram_dialog.widgets.kbd import Button, Column, Row, Back, Select, Checkbox
from aiogram_dialog.widgets.input import TextInput, MessageInput
from aiogram_dialog.widgets.media import DynamicMedia
from sulguk import SULGUK_PARSE_MODE

from internal import interface, model


class GeneratePublicationDialog(interface.IGeneratePublicationDialog):

    def __init__(
            self,
            tel: interface.ITelemetry,
            generate_publication_service: interface.IGeneratePublicationService,
            generate_publication_getter: interface.IGeneratePublicationGetter,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.generate_publication_service = generate_publication_service
        self.generate_publication_getter = generate_publication_getter

    def get_dialog(self) -> Dialog:
        return Dialog(
            self.get_select_category_window(),
            self.get_input_text_window(),
            self.get_generation_window(),
            self.get_preview_window(),
            self.get_edit_text_menu_window(),
            self.get_image_menu_window(),
            self.get_edit_text_window(),
            self.get_upload_image_window(),
            self.get_combine_images_choice_window(),
            self.get_combine_images_upload_window(),
            self.get_combine_images_prompt_window(),
            self.get_combine_images_confirm_window(),
            self.get_social_network_select_window(),
            self.get_text_too_long_alert_window(),
            self.get_publication_success_window()  # –ù–æ–≤–æ–µ –æ–∫–Ω–æ
        )

    def get_select_category_window(self) -> Window:
        return Window(
            Multi(
                Const("üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b><br>"),
                Case(
                    {
                        True: Const("üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏:</b>"),
                        False: Multi(
                            Const("üö´ <b>–†—É–±—Ä–∏–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</b><br>"),
                            Const("üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–±—Ä–∏–∫</i>"),
                        ),
                    },
                    selector="has_categories"
                ),
                sep="",
            ),

            Column(
                Select(
                    Format("üìå {item[name]}"),
                    id="category_select",
                    items="categories",
                    item_id_getter=lambda item: str(item["id"]),
                    on_click=self.generate_publication_service.handle_select_category,
                    when="has_categories",
                ),
            ),

            Button(
                Const("–°–æ–∑–¥–∞—Ç—å —Ä—É–±—Ä–∏–∫—É"),
                id="go_to_main_menu",
                on_click=self.generate_publication_service.go_to_create_category,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="cancel_to_content_menu",
                on_click=self.generate_publication_service.handle_go_to_content_menu,
            ),

            state=model.GeneratePublicationStates.select_category,
            getter=self.generate_publication_getter.get_categories_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_input_text_window(self) -> Window:
        return Window(
            Case(
                {
                    False: Multi(
                        Const("üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b><br><br>"),
                        Format("{category_hint}<br><br>"),
                        Const("üí¨ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø—Ä–µ–≤—Ä–∞—â—É –∏—Ö –≤ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</i>"),
                        Case(
                            {
                                True: Format("<br>üìÑ <b>–í–∞—à —Ç–µ–∫—Å—Ç:</b><br><i>{input_text}</i>"),
                                False: Const(""),
                            },
                            selector="has_input_text"
                        ),
                        # Text input error messages
                        Case(
                            {
                                True: Const("<br>‚ùå <b>–û—à–∏–±–∫–∞:</b> –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
                                False: Const(""),
                            },
                            selector="has_void_input_text"
                        ),
                        Case(
                            {
                                True: Const("<br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                                False: Const(""),
                            },
                            selector="has_small_input_text"
                        ),
                        Case(
                            {
                                True: Const("<br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b><br><i>–ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                                False: Const(""),
                            },
                            selector="has_big_input_text"
                        ),
                        # Voice input error messages
                        Case(
                            {
                                True: Const(
                                    "<br>üé§ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç</i>"),
                                False: Const(""),
                            },
                            selector="has_invalid_content_type"
                        ),
                        sep="",
                    ),
                    True: Const("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
                },
                selector="voice_transcribe"
            ),

            MessageInput(
                func=self.generate_publication_service.handle_generate_publication_prompt_input,
            ),

            Row(
                # Next(
                #     Const("‚ñ∂Ô∏è –î–∞–ª–µ–µ"),
                #     when="has_input_text"
                # ),
                Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
            ),

            state=model.GeneratePublicationStates.input_text,
            getter=self.generate_publication_getter.get_input_text_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_generation_window(self) -> Window:
        return Window(
            Multi(
                Const("üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b><br>"),
                Const("üì∏ <i>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ç–µ–∫—Å—Ç—É?</i>"),
                sep="",
            ),

            Column(
                Button(
                    Const("üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"),
                    id="text_only",
                    on_click=self.generate_publication_service.handle_generate_text,
                ),
                Button(
                    Const("üñºÔ∏è –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"),
                    id="with_image",
                    on_click=self.generate_publication_service.handle_generate_text_with_image,
                ),
            ),

            Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),

            state=model.GeneratePublicationStates.generation,
            getter=self.generate_publication_getter.get_input_text_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_preview_window(self) -> Window:
        return Window(
            Multi(
                Const("üëÅÔ∏è <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</b><br><br>"),
                Format("{publication_text}"),
                Case(
                    {
                        True: Format("<br><br>üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {current_image_index} –∏–∑ {total_images}</b>"),
                        False: Const(""),
                    },
                    selector="has_multiple_images"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="preview_image_media",
                when="has_image",
            ),

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"),
                    id="prev_image",
                    on_click=self.generate_publication_service.handle_prev_image,
                    when="has_multiple_images",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"),
                    id="next_image",
                    on_click=self.generate_publication_service.handle_next_image,
                    when="has_multiple_images",
                ),
                when="has_multiple_images",
            ),

            Column(
                Row(
                    Button(
                        Const("‚úèÔ∏è –¢–µ–∫—Å—Ç"),
                        id="edit_text_menu",
                        on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.edit_text_menu,
                                                             ShowMode.EDIT),
                    ),
                    Button(
                        Const("üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞"),
                        id="edit_image_menu",
                        on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.image_menu, ShowMode.EDIT),
                    ),
                ),
                Button(
                    Const("üìù –î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"),
                    id="save_draft",
                    on_click=self.generate_publication_service.handle_add_to_drafts,
                ),
                Button(
                    Const("üëÅÔ∏è‚Äçüó®Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"),
                    id="send_moderation",
                    on_click=self.generate_publication_service.handle_send_to_moderation,
                    when="requires_moderation",
                ),
                Button(
                    Const("üåê –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"),
                    id="select_social_network",
                    on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.social_network_select,
                                                         ShowMode.EDIT),
                    when="can_publish_directly",
                ),
                Button(
                    Const("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"),
                    id="publish_now",
                    on_click=self.generate_publication_service.handle_publish_now,
                    when="can_publish_directly",
                ),
            ),
            Button(
                Const("‚ùå –û—Ç–º–µ–Ω–∞"),
                id="cancel",
                on_click=self.generate_publication_service.handle_go_to_content_menu,
            ),

            state=model.GeneratePublicationStates.preview,
            getter=self.generate_publication_getter.get_preview_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_text_menu_window(self) -> Window:
        return Window(
            Multi(
                Case(
                    {
                        False: Multi(
                            Const("‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b><br>"),
                            Format("<blockquote>{publication_text}</blockquote><br>"),
                            Const("üéØ <b>–ö–ê–ö –ò–ó–ú–ï–ù–ò–¢–¨ –¢–ï–ö–°–¢:</b><br><br>"),
                            Const("üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b><br>"),
                            Const("<i>–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å</i><br>"),
                            Const("üé§ <b>–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ</b><br>"),
                            Const("<i>–û–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–º</i><br><br>"),
                            Const("üîò <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</b>"),
                        ),
                        True: Case(
                            {
                                True: Multi(
                                    Format("üìù <b>–í–∞—à–∏ —É–∫–∞–∑–∞–Ω–∏—è:</b><br><code>{regenerate_prompt}</code><br>"),
                                    Const("‚è≥ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...</b><br>"),
                                    Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                                ),
                                False: Multi(
                                    Const("‚è≥ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...</b><br>"),
                                    Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                                ),
                            },
                            selector="has_regenerate_prompt"
                        )
                    },
                    selector="is_regenerating_text"
                ),
                # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                Case(
                    {
                        True: Const("<br>üîÑ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>"),
                        False: Const(""),
                    },
                    selector="voice_transcribe"
                ),
                # –û—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                Case(
                    {
                        True: Const("<br>‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∑–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"),
                        False: Const(""),
                    },
                    selector="has_void_regenerate_prompt"
                ),
                Case(
                    {
                        True: Const("<br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_regenerate_prompt"
                ),
                Case(
                    {
                        True: Const("<br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è</b><br><i>–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_regenerate_prompt"
                ),
                Case(
                    {
                        True: Const("<br>üé§ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_content_type"
                ),
                sep="",
            ),

            MessageInput(
                func=self.generate_publication_service.handle_regenerate_text_prompt_input,
            ),

            Column(
                Button(
                    Const("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"),
                    id="regenerate_all",
                    on_click=self.generate_publication_service.handle_regenerate_text,
                    when=~F["is_regenerating_text"]
                ),
                Button(
                    Const("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç"),
                    id="edit_content",
                    on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.edit_text, ShowMode.EDIT),
                    when=~F["is_regenerating_text"]
                ),
            ),
            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="preview",
                on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.preview, ShowMode.EDIT),
                when=~F["is_regenerating_text"]
            ),

            state=model.GeneratePublicationStates.edit_text_menu,
            getter=self.generate_publication_getter.get_edit_text_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_text_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç</b><br>"),
                Format("<blockquote>{publication_text}</blockquote><br>"),
                Const("‚úèÔ∏è <b>–ù–ê–ü–ò–®–ò–¢–ï –ù–û–í–´–ô –¢–ï–ö–°–¢:</b><br>"),
                Const("<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π</i><br><br>"),
                # Error messages
                Case(
                    {
                        True: Const("<br><br>‚ùå <b>–û—à–∏–±–∫–∞:</b> –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
                        False: Const(""),
                    },
                    selector="has_void_text"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç</b><br><i>–ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_text"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b><br><i>–ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_text"
                ),
                sep="",
            ),

            TextInput(
                id="text_input",
                on_success=self.generate_publication_service.handle_edit_text,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="edit_text_menu",
                on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.edit_text_menu, ShowMode.EDIT),
            ),

            state=model.GeneratePublicationStates.edit_text,
            getter=self.generate_publication_getter.get_edit_text_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_image_menu_window(self) -> Window:
        return Window(
            Multi(
                Case(
                    {
                        False: Const(""),
                        True: Multi(
                            Const("‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b><br>"),
                            Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                        ),
                    },
                    selector="is_generating_image"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="preview_image_media",
                when="has_image",
            ),

            Multi(
                Case(
                    {
                        True: Multi(
                            Const("üéØ <b>–ß–¢–û –ú–û–ñ–ù–û –°–î–ï–õ–ê–¢–¨:</b><br><br>"),
                            Const("üí¨ <b>–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ üé§ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ</b><br>"),
                            Const("<i>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Å —É—á—ë—Ç–æ–º –≤–∞—à–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π</i><br>"),
                            Const("üîò <b>–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\"</b><br>"),
                            Const("<i>–ò–ò —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</i><br><br>"),
                            Const("üìù <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:</b><br>"),
                            Const("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∏ –æ—Å–≤–µ—â–µ–Ω–∏—è<br>"),
                            Const("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤<br>"),
                            Const("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è<br>"),
                            Const("‚Ä¢ –ü—Ä–∞–≤–∫–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ —Ñ–æ–Ω–∞"),
                        ),
                        False: Multi(
                            Const("üéØ <b>–ß–¢–û –ú–û–ñ–ù–û –°–î–ï–õ–ê–¢–¨:</b><br><br>"),
                            Const("üîò <b>–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\"</b><br>"),
                            Const("<i>–ò–ò —Å–æ–∑–¥–∞—Å—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</i><br><br>"),
                            Const("üí¨ <b>–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ üé§ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ</b><br>"),
                            Const("<i>–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è —Å —É—á—ë—Ç–æ–º –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è</i><br>"),
                            Const("üìù <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:</b><br>"),
                            Const("‚Ä¢ üë• –û–±—ä–µ–∫—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏<br>"),
                            Const("‚Ä¢ üé≠ –°—Ç–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ<br>"),
                            Const("‚Ä¢ üåç –§–æ–Ω –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ<br>"),
                            Const("‚Ä¢ ‚ú® –î–µ—Ç–∞–ª–∏ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ"),
                        ),
                    },
                    selector="has_image"
                ),
                Case(
                    {
                        True: Const("<br><br>üîÑ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>"),
                        False: Const(""),
                    },
                    selector="voice_transcribe"
                ),
                Case(
                    {
                        True: Const("<br><br>‚ùå <b>–û—à–∏–±–∫–∞:</b> –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
                        False: Const(""),
                    },
                    selector="has_void_image_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_image_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_image_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üé§ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_content_type"
                ),
                when=~F["is_generating_image"],
                sep="",
            ),

            MessageInput(
                func=self.generate_publication_service.handle_generate_image_prompt_input,
            ),

            Column(
                Button(
                    Const("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"),
                    id="generate_image",
                    on_click=self.generate_publication_service.handle_generate_new_image,
                ),
                Button(
                    Const("üì∑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ"),
                    id="upload_image",
                    on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.upload_image, ShowMode.EDIT),
                ),
                Button(
                    Const("üìê –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
                    id="combine_images",
                    on_click=self.generate_publication_service.handle_combine_images_start,
                ),
                Button(
                    Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                    id="remove_image",
                    on_click=self.generate_publication_service.handle_remove_image,
                    when="has_image",
                ),
                when=~F["is_generating_image"]
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="preview",
                on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.preview, ShowMode.EDIT),
                when=~F["is_generating_image"]
            ),

            state=model.GeneratePublicationStates.image_menu,
            getter=self.generate_publication_getter.get_image_menu_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_upload_image_window(self) -> Window:
        return Window(
            Multi(
                Const("üì∑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b><br>"),
                Const("üì§ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>"),
                # Add error messages
                Case(
                    {
                        True: Const(
                            "<br>‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_image_type"
                ),
                Case(
                    {
                        True: Const("<br>üìÅ <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b><br><i>–ú–∞–∫—Å–∏–º—É–º 10 –ú–ë</i>"),
                        False: Const(""),
                    },
                    selector="has_big_image_size"
                ),
                Case(
                    {
                        True: Const(
                            "<br>‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b><br><i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ</i>"),
                        False: Const(""),
                    },
                    selector="has_image_processing_error"
                ),
                sep="",
            ),

            MessageInput(
                func=self.generate_publication_service.handle_image_upload,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="image_menu",
                on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.image_menu, ShowMode.EDIT),
            ),

            state=model.GeneratePublicationStates.upload_image,
            getter=self.generate_publication_getter.get_upload_image_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_social_network_select_window(self) -> Window:
        return Window(
            Multi(
                Const("üåê <b>–í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b><br>"),
                Case(
                    {
                        True: Multi(
                            Const("‚ö†Ô∏è <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã</b><br>"),
                            Const(
                                "üîó <i>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</i><br>"),
                            Const("üí° <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</b>"),
                        ),
                        False: Multi(
                            Const("üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b><br>"),
                            Const("üí° <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</i>"),
                        ),
                    },
                    selector="no_connected_networks"
                ),
                sep="",
            ),

            # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö)
            Column(
                Checkbox(
                    Const("‚úÖ üì± Telegram"),
                    Const("‚¨ú üì± Telegram"),
                    id="telegram_checkbox",
                    default=False,
                    on_state_changed=self.generate_publication_service.handle_toggle_social_network,
                    when="telegram_connected",
                ),
                Checkbox(
                    Const("‚úÖ üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"),
                    Const("‚¨ú üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"),
                    id="vkontakte_checkbox",
                    default=False,
                    on_state_changed=self.generate_publication_service.handle_toggle_social_network,
                    when="vkontakte_connected",
                ),
                when="has_available_networks",
            ),

            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            Row(
                Button(
                    Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    id="back_to_preview",
                    on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.preview, ShowMode.EDIT),
                ),
            ),

            state=model.GeneratePublicationStates.social_network_select,
            getter=self.generate_publication_getter.get_social_network_select_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_text_too_long_alert_window(self) -> Window:
        return Window(
            Multi(
                Const("‚ö†Ô∏è <b>–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π</b><br><br>"),
                Format("üìè <b>–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞:</b> {current_text_length} —Å–∏–º–≤–æ–ª–æ–≤<br>"),
                Format("üìä <b>–ú–∞–∫—Å–∏–º—É–º —Å —Ñ–æ—Ç–æ:</b> {max_length_with_image} —Å–∏–º–≤–æ–ª–æ–≤<br><br>"),
                Const("üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b><br>"),
                Const("‚Ä¢ <b>–°–∂–∞—Ç—å —Ç–µ–∫—Å—Ç</b> ‚Äî –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã<br>"),
                Const("‚Ä¢ <b>–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ñ–æ—Ç–æ</b> ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º"),
                sep="",
            ),

            Column(
                Button(
                    Const("üìù –°–∂–∞—Ç—å —Ç–µ–∫—Å—Ç"),
                    id="compress_text",
                    on_click=self.generate_publication_service.handle_compress_text,
                ),
                Button(
                    Const("üóëÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ñ–æ—Ç–æ"),
                    id="remove_photo",
                    on_click=self.generate_publication_service.handle_remove_photo_from_long_text,
                ),
            ),

            Button(
                Const("üìã –ö –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                id="go_to_content_menu",
                on_click=self.generate_publication_service.handle_go_to_content_menu,
            ),

            state=model.GeneratePublicationStates.text_too_long_alert,
            getter=self.generate_publication_getter.get_text_too_long_alert_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_combine_images_choice_window(self) -> Window:
        return Window(
            Multi(
                Const("üìê <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b><br><br>"),
                Case(
                    {
                        True: Multi(
                            Const("üñºÔ∏è <i>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</i><br><br>"),
                            Const("üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"),
                        ),
                        False: Multi(
                            Const("üì§ <i>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç 2 –¥–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è</i>"),
                        ),
                    },
                    selector="has_current_image"
                ),
                sep="",
            ),

            Column(
                Button(
                    Const("‚ûï –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º"),
                    id="combine_with_current",
                    on_click=self.generate_publication_service.handle_combine_with_current,
                    when="has_current_image",
                ),
                Button(
                    Const("üîÑ –ù–∞—á–∞—Ç—å —Å –Ω–æ–≤—ã—Ö"),
                    id="combine_from_scratch",
                    on_click=self.generate_publication_service.handle_combine_from_scratch,
                    when="has_current_image",
                ),
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_image_menu",
                on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.image_menu, ShowMode.EDIT),
            ),

            state=model.GeneratePublicationStates.combine_images_choice,
            getter=self.generate_publication_getter.get_combine_images_choice_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_combine_images_upload_window(self) -> Window:
        return Window(
            Multi(
                Const("üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b><br><br>"),
                Case(
                    {
                        True: Format("üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {combine_images_count} –∏–∑ 3</b><br>"),
                        False: Const(""),
                    },
                    selector="has_combine_images"
                ),
                Case(
                    {
                        True: Format("<br>üìç <b>–°–µ–π—á–∞—Å –ø–æ–∫–∞–∑–∞–Ω–æ:</b> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {combine_current_index} –∏–∑ {combine_images_count}"),
                        False: Const(""),
                    },
                    selector="has_multiple_combine_images"
                ),
                Const("<br><br>üì∑ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 3)</i><br>"),
                Const("üí° <i>–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ \"–î–∞–ª–µ–µ\"</i>"),
                # Error messages
                Case(
                    {
                        True: Const(
                            "<br><br>‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞)</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_combine_image_type"
                ),
                Case(
                    {
                        True: Const("<br><br>üìÅ <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b><br><i>–ú–∞–∫—Å–∏–º—É–º 10 –ú–ë</i>"),
                        False: Const(""),
                    },
                    selector="has_big_combine_image_size"
                ),
                Case(
                    {
                        True: Const("<br><br>‚ö†Ô∏è <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç</b><br><i>–ú–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>"),
                        False: Const(""),
                    },
                    selector="combine_images_limit_reached"
                ),
                Case(
                    {
                        True: Const("<br><br>‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b><br><i>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>"),
                        False: Const(""),
                    },
                    selector="not_enough_combine_images"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="combine_current_image_media",
                when="has_combine_images",
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"),
                    id="prev_combine_image",
                    on_click=self.generate_publication_service.handle_prev_combine_image,
                    when="has_multiple_combine_images",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"),
                    id="next_combine_image",
                    on_click=self.generate_publication_service.handle_next_combine_image,
                    when="has_multiple_combine_images",
                ),
                when="has_multiple_combine_images",
            ),

            MessageInput(
                func=self.generate_publication_service.handle_combine_image_upload,
            ),

            Column(
                Button(
                    Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ"),
                    id="delete_combine_image",
                    on_click=self.generate_publication_service.handle_delete_combine_image,
                    when="has_combine_images",
                ),
                Button(
                    Const("‚ñ∂Ô∏è –î–∞–ª–µ–µ"),
                    id="next_to_prompt",
                    on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.combine_images_prompt, ShowMode.EDIT),
                    when="has_enough_combine_images",
                ),
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_image_menu",
                on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.image_menu, ShowMode.EDIT),
            ),

            state=model.GeneratePublicationStates.combine_images_upload,
            getter=self.generate_publication_getter.get_combine_images_upload_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_combine_images_prompt_window(self) -> Window:
        return Window(
            Multi(
                Case(
                    {
                        False: Multi(
                            Const("‚úçÔ∏è <b>–ö–∞–∫ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?</b><br><br>"),
                            Const("üí¨ <b>–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b><br>"),
                            Const("‚Ä¢ <i>–†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ</i><br>"),
                            Const("‚Ä¢ <i>–í –≤–∏–¥–µ –∫–æ–ª–ª–∞–∂–∞</i><br>"),
                            Const("‚Ä¢ <i>–ù–∞–ª–æ–∂–∏—Ç–µ –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞</i><br>"),
                            Const("‚Ä¢ <i>–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ, –æ–¥–Ω–æ –ø–æ–¥ –¥—Ä—É–≥–∏–º</i><br><br>"),
                            Const("üé§ <i>–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i><br>"),
                            Const("‚è≠Ô∏è <i>–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥ ‚Äî –ò–ò —Å–∞–º —Ä–µ—à–∏—Ç, –∫–∞–∫ –ª—É—á—à–µ</i>"),
                        ),
                        True: Multi(
                            Const("‚è≥ <b>–û–±—ä–µ–¥–∏–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</b><br>"),
                            Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                        ),
                    },
                    selector="is_combining_images"
                ),
                Case(
                    {
                        True: Const("<br><br>üîÑ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>"),
                        False: Const(""),
                    },
                    selector="voice_transcribe"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_combine_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_combine_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üé§ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_content_type"
                ),
                sep="",
            ),

            MessageInput(
                func=self.generate_publication_service.handle_combine_prompt_input,
            ),

            Column(
                Button(
                    Const("üîó –û–±—ä–µ–¥–∏–Ω–∏—Ç—å"),
                    id="execute_combine",
                    on_click=self.generate_publication_service.handle_execute_combine,
                    when=~F["is_combining_images"]
                ),
                Button(
                    Const("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
                    id="skip_prompt",
                    on_click=self.generate_publication_service.handle_execute_combine,
                    when=~F["is_combining_images"]
                ),
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_upload",
                on_click=lambda c, b, d: d.switch_to(model.GeneratePublicationStates.combine_images_upload, ShowMode.EDIT),
                when=~F["is_combining_images"]
            ),

            state=model.GeneratePublicationStates.combine_images_prompt,
            getter=self.generate_publication_getter.get_combine_images_prompt_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_combine_images_confirm_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è</b><br><br>"),
                Const("üñºÔ∏è <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>"),
                sep="",
            ),

            DynamicMedia(
                selector="combine_result_media",
            ),

            Multi(
                Case(
                    {
                        True: Multi(
                            Const("<br><br>üì∑ <b>–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>"),
                        ),
                        False: Const(""),
                    },
                    selector="has_old_image_backup"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="old_image_backup_media",
                when="has_old_image_backup",
            ),

            Multi(
                Const("<br><br>üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?</b>"),
                sep="",
            ),

            Row(
                Button(
                    Const("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"),
                    id="confirm_combine",
                    on_click=self.generate_publication_service.handle_confirm_combine,
                ),
                Button(
                    Const("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"),
                    id="cancel_combine",
                    on_click=self.generate_publication_service.handle_cancel_combine,
                ),
            ),

            state=model.GeneratePublicationStates.combine_images_confirm,
            getter=self.generate_publication_getter.get_combine_images_confirm_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_publication_success_window(self) -> Window:
        return Window(
            Multi(
                Const("üéâ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!</b><br>"),
                Case(
                    {
                        True: Multi(
                            Const("üîó <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ –ø–æ—Å—Ç—ã:</b><br>"),
                            Case(
                                {
                                    True: Format(
                                        "üì± <b>Telegram:</b> <a href='{telegram_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a><br>"),
                                    False: Const(""),
                                },
                                selector="has_telegram_link"
                            ),
                            Case(
                                {
                                    True: Format(
                                        "üîµ <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:</b> <a href='{vkontakte_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a><br>"),
                                    False: Const(""),
                                },
                                selector="has_vkontakte_link"
                            ),
                            Const("<br>üí° <i>–°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\"</i>"),
                        ),
                        False: Const("üìù <i>–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞, –Ω–æ —Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</i>"),
                    },
                    selector="has_post_links"
                ),
                sep="",
            ),

            Button(
                Const("üìã –ö –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                id="go_to_content_menu",
                on_click=self.generate_publication_service.handle_go_to_content_menu,
            ),

            state=model.GeneratePublicationStates.publication_success,
            getter=self.generate_publication_getter.get_publication_success_data,
            parse_mode=SULGUK_PARSE_MODE,
        )