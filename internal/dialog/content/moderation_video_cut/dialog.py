from aiogram_dialog import Window, Dialog, ShowMode
from aiogram_dialog.widgets.text import Const, Format, Multi, Case
from aiogram_dialog.widgets.kbd import Button, Column, Row, Checkbox
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.media import DynamicMedia
from sulguk import SULGUK_PARSE_MODE

from internal import interface, model


class VideoCutModerationDialog(interface.IVideoCutModerationDialog):

    def __init__(
            self,
            tel: interface.ITelemetry,
            video_cut_moderation_service: interface.IVideoCutModerationService,
            video_cut_moderation_getter: interface.IVideoCutModerationGetter,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.video_cut_moderation_service = video_cut_moderation_service
        self.video_cut_moderation_getter = video_cut_moderation_getter

    def get_dialog(self) -> Dialog:
        return Dialog(
            self.get_moderation_list_window(),
            self.get_reject_comment_window(),
            self.get_edit_preview_window(),
            self.get_edit_title_window(),
            self.get_edit_description_window(),
            self.get_edit_tags_window(),
            self.get_social_network_select_window(),
        )

    def get_moderation_list_window(self) -> Window:
        return Window(
            Multi(
                Const("üé¨ <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ</b><br><br>"),
                Case(
                    {
                        True: Multi(
                            Format("üìΩÔ∏è <b>{video_name}</b><br>"),
                            Format("üìù {video_description}<br><br>"),
                            Case(
                                {
                                    True: Format("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> <code>{video_tags}</code><br>"),
                                    False: Const("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> <i>–Ω–µ —É–∫–∞–∑–∞–Ω—ã</i><br>"),
                                },
                                selector="has_tags"
                            ),
                            Format("üë§ <b>–ê–≤—Ç–æ—Ä:</b> <code>{creator_name}</code><br>"),
                            Format("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> <code>{created_at}</code><br>"),
                            Format("üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{youtube_reference}'>YouTube</a><br><br>"),
                        ),
                        False: Multi(
                            Const("üìÇ <b>–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞</b><br><br>"),
                            Const("üí° <i>–í—Å–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</i>"),
                        ),
                    },
                    selector="has_video_cuts"
                ),
                sep="",
            ),

            DynamicMedia(
                "video_media",
                when="has_video"
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥"),
                    id="prev_video_cut",
                    on_click=self.video_cut_moderation_service.handle_navigate_video_cut,
                    when="has_prev",
                ),
                Button(
                    Format("üìä {current_index}/{total_count}"),
                    id="counter",
                    on_click=lambda c, b, d: c.answer("üìà –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∏–¥–µ–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
                    when="has_video_cuts",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥"),
                    id="next_video_cut",
                    on_click=self.video_cut_moderation_service.handle_navigate_video_cut,
                    when="has_next",
                ),
                when="has_video_cuts",
            ),

            Column(
                Row(
                    Button(
                        Const("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                        id="edit",
                        on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.edit_preview),
                        when="has_video_cuts",
                    ),
                    Button(
                        Const("üåê –í—ã–±—Ä–∞—Ç—å —Å–æ—Ü—Å–µ—Ç–∏"),
                        id="select_social_network",
                        on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.social_network_select,
                                                             ShowMode.EDIT),
                        when="has_video_cuts",
                    ),
                ),
                Button(
                    Const("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"),
                    id="approve",
                    on_click=self.video_cut_moderation_service.handle_publish_now,
                    when="has_video_cuts",
                ),
                Button(
                    Const("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"),
                    id="reject_with_comment",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.reject_comment),
                    when="has_video_cuts",
                ),
                when="has_video_cuts",
            ),

            Row(
                Button(
                    Const("‚óÄÔ∏è –ú–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                    id="back_to_content_menu",
                    on_click=self.video_cut_moderation_service.handle_back_to_content_menu,
                ),
            ),

            state=model.VideoCutModerationStates.moderation_list,
            getter=self.video_cut_moderation_getter.get_moderation_list_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_reject_comment_window(self) -> Window:
        return Window(
            Multi(
                Const("‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ</b><br><br>"),
                Format("üé¨ <b>–í–∏–¥–µ–æ:</b> {video_name}<br>"),
                Format("üë§ <b>–ê–≤—Ç–æ—Ä:</b> {creator_name}<br><br>"),
                Const("üí¨ <b>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b><br>"),
                Const("üì® <i>–ê–≤—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º</i><br><br>"),
                Case(
                    {
                        True: Multi(
                            Const("üìù <b>–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b><br>"),
                            Format("<code>{reject_comment}</code>"),
                        ),
                        False: Const("‚å®Ô∏è <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...</i>"),
                    },
                    selector="has_comment"
                ),
                sep="",
            ),
            Case(
                {
                    True: Const("<br><br>‚ö†Ô∏è <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º</b>"),
                    False: Const("")
                },
                selector="has_void_reject_comment"
            ),
            Case(
                {
                    True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏</i>"),
                    False: Const("")
                },
                selector="has_small_reject_comment"
            ),
            Case(
                {
                    True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b><br><i>–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                    False: Const("")
                },
                selector="has_big_reject_comment"
            ),

            TextInput(
                id="reject_comment_input",
                on_success=self.video_cut_moderation_service.handle_reject_comment_input,
            ),

            Row(
                Button(
                    Const("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"),
                    id="send_rejection",
                    on_click=self.video_cut_moderation_service.handle_send_rejection,
                    when="has_comment",
                ),
                Button(
                    Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    id="back_to_moderation_list",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.moderation_list),
                ),
            ),

            state=model.VideoCutModerationStates.reject_comment,
            getter=self.video_cut_moderation_getter.get_reject_comment_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_preview_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b><br><br>"),
                Multi(
                    Format("üìΩÔ∏è <b>{video_name}</b><br>"),
                    Format("üìù {video_description}<br><br>"),
                    Case(
                        {
                            True: Format("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> <code>{video_tags}</code><br>"),
                            False: Const("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> <i>–Ω–µ —É–∫–∞–∑–∞–Ω—ã</i><br>"),
                        },
                        selector="has_tags"
                    ),
                    Format("üë§ <b>–ê–≤—Ç–æ—Ä:</b> <code>{creator_name}</code><br>"),
                    Format("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> <code>{created_at}</code><br>"),
                    Format("üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{youtube_reference}'>YouTube</a><br>"),
                ),
                Case(
                    {
                        True: Const("<br>‚ö†Ô∏è <b><i>–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!</i></b><br>"),
                        False: Const(""),
                    },
                    selector="has_changes"
                ),
                Const("<br>üìå <b>–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å?</b>"),
                sep="",
            ),

            DynamicMedia(
                "video_media",
                when="has_video"
            ),

            Column(
                Button(
                    Const("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"),
                    id="edit_title",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.edit_title),
                ),
                Button(
                    Const("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
                    id="edit_description",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.edit_description),
                ),
                Button(
                    Const("üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏"),
                    id="edit_tags",
                    on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.edit_tags),
                ),
            ),

            Row(
                Button(
                    Const("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
                    id="save_edits",
                    on_click=self.video_cut_moderation_service.handle_save_edits,
                    when="has_changes",
                ),
                Button(
                    Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    id="back_to_moderation_list",
                    on_click=self.video_cut_moderation_service.handle_back_to_moderation_list,
                ),
            ),

            state=model.VideoCutModerationStates.edit_preview,
            getter=self.video_cut_moderation_getter.get_edit_preview_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_title_window(self) -> Window:
        return Window(
            Multi(
                Const("üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b><br><br>"),
                Format("üìã <b>–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b><br><i>{current_title}</i><br><br>"),
                Const("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b><br><br>"),
                Const("üìè <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º:</b><br>"),
                Const("üé¨ YouTube Shorts: <code>–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤</code><br>"),
                Const("üì± Instagram Reels: <code>–º–∞–∫—Å–∏–º—É–º 2200 —Å–∏–º–≤–æ–ª–æ–≤</code>"),
                sep="",
            ),
            Case(
                {
                    True: Const("<br><br>‚ö†Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º</b>"),
                    False: Const("")
                },
                selector="has_void_title"
            ),
            Case(
                {
                    True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b><br><i>–ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                    False: Const("")
                },
                selector="has_small_title"
            ),
            Case(
                {
                    True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b><br><i>–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è YouTube Shorts</i>"),
                    False: Const("")
                },
                selector="has_big_title"
            ),

            TextInput(
                id="title_input",
                on_success=self.video_cut_moderation_service.handle_edit_title,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_edit_preview",
                on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.edit_preview),
            ),

            state=model.VideoCutModerationStates.edit_title,
            getter=self.video_cut_moderation_getter.get_edit_title_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_description_window(self) -> Window:
        """–û–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
        return Window(
            Multi(
                Const("üìÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b><br><br>"),
                Format("üìä <b>–î–ª–∏–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:</b> <code>{current_description_length} —Å–∏–º–≤–æ–ª–æ–≤</code><br><br>"),
                Const("<b>–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b><br>"),
                Format("{video_description}<br><br>"),
                Const("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b><br><br>"),
                Const("üìè <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º:</b><br>"),
                Const("üé¨ YouTube: <code>–º–∞–∫—Å–∏–º—É–º 5000 —Å–∏–º–≤–æ–ª–æ–≤</code><br>"),
                Const("üì± Instagram: <code>–º–∞–∫—Å–∏–º—É–º 2200 —Å–∏–º–≤–æ–ª–æ–≤</code><br><br>"),
                Const("üí° <i>–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥</i>"),
                sep="",
            ),
            Case(
                {
                    True: Const("<br><br>‚ö†Ô∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º</b>"),
                    False: Const("")
                },
                selector="has_void_description"
            ),
            Case(
                {
                    True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                    False: Const("")
                },
                selector="has_small_description"
            ),
            Case(
                {
                    True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∞–∫—Å–∏–º—É–º 2200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Instagram</i>"),
                    False: Const("")
                },
                selector="has_big_description"
            ),

            TextInput(
                id="description_input",
                on_success=self.video_cut_moderation_service.handle_edit_description,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_edit_preview",
                on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.edit_preview),
            ),

            state=model.VideoCutModerationStates.edit_description,
            getter=self.video_cut_moderation_getter.get_edit_description_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_tags_window(self) -> Window:
        return Window(
            Multi(
                Const("üè∑Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤</b><br><br>"),
                Case(
                    {
                        True: Format("üìã <b>–¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏:</b><br><code>{current_tags}</code><br><br>"),
                        False: Const("üìã <b>–¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏:</b> <i>–Ω–µ —É–∫–∞–∑–∞–Ω—ã</i><br><br>"),
                    },
                    selector="has_tags"
                ),
                Const("‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b><br><br>"),
                Const("üí° <b>–ü—Ä–∏–º–µ—Ä:</b> <code>—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ–±—É—á–µ–Ω–∏–µ, shorts</code><br><br>"),
                Const("üìè <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b><br>"),
                Const("üé¨ YouTube: <code>–º–∞–∫—Å–∏–º—É–º 15 —Ç–µ–≥–æ–≤</code><br>"),
                Const("üì± Instagram: <code>–º–∞–∫—Å–∏–º—É–º 30 —Ö–µ—à—Ç–µ–≥–æ–≤</code><br><br>"),
                Const("üóëÔ∏è <i>–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤</i>"),
                sep="",
            ),
            Case(
                {
                    True: Const("<br><br>‚ö†Ô∏è <b>–¢–µ–≥–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏</b><br><i>–ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</i>"),
                    False: Const("")
                },
                selector="has_void_tags"
            ),

            TextInput(
                id="tags_input",
                on_success=self.video_cut_moderation_service.handle_edit_tags,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_edit_preview",
                on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.edit_preview),
            ),

            state=model.VideoCutModerationStates.edit_tags,
            getter=self.video_cut_moderation_getter.get_edit_tags_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_social_network_select_window(self) -> Window:
        return Window(
            Multi(
                Const("üåê <b>–í—ã–±–æ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b><br><br>"),
                Case(
                    {
                        True: Multi(
                            Const("‚ö†Ô∏è <b>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Å–æ—Ü—Å–µ—Ç–µ–π!</b><br><br>"),
                            Const("üîó <i>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å.</i><br><br>"),
                            Const("üë®‚Äçüíº <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏."),
                        ),
                        False: Multi(
                            Const("üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b><br><br>"),
                            Const("üí° <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</i>"),
                        ),
                    },
                    selector="no_connected_networks"
                ),
                sep="",
            ),

            Column(
                Checkbox(
                    Const("‚úÖ üé¨ YouTube Shorts"),
                    Const("‚¨ú üé¨ YouTube Shorts"),
                    id="youtube_checkbox",
                    default=False,
                    on_state_changed=self.video_cut_moderation_service.handle_toggle_social_network,
                    when="youtube_connected",
                ),
                Checkbox(
                    Const("‚úÖ üì± Instagram Reels"),
                    Const("‚¨ú üì± Instagram Reels"),
                    id="instagram_checkbox",
                    default=False,
                    on_state_changed=self.video_cut_moderation_service.handle_toggle_social_network,
                    when="instagram_connected",
                ),
                when="has_available_networks",
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
                id="back_to_video_cut_list_no_networks",
                on_click=lambda c, b, d: d.switch_to(model.VideoCutModerationStates.moderation_list),
            ),

            state=model.VideoCutModerationStates.social_network_select,
            getter=self.video_cut_moderation_getter.get_social_network_select_data,
            parse_mode=SULGUK_PARSE_MODE,
        )