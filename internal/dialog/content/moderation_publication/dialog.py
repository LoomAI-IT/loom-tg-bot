from aiogram import F
from aiogram_dialog import Window, Dialog, ShowMode
from aiogram_dialog.widgets.text import Const, Format, Multi, Case
from aiogram_dialog.widgets.kbd import Button, Column, Row, Checkbox
from aiogram_dialog.widgets.input import TextInput, MessageInput
from aiogram_dialog.widgets.media import DynamicMedia
from sulguk import SULGUK_PARSE_MODE

from internal import interface, model


class ModerationPublicationDialog(interface.IModerationPublicationDialog):

    def __init__(
            self,
            tel: interface.ITelemetry,
            moderation_publication_service: interface.IModerationPublicationService,
            moderation_publication_getter: interface.IModerationPublicationGetter,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.moderation_publication_service = moderation_publication_service
        self.moderation_publication_getter = moderation_publication_getter

    def get_dialog(self) -> Dialog:
        return Dialog(
            self.get_moderation_list_window(),
            self.get_reject_comment_window(),
            self.get_edit_preview_window(),
            self.get_edit_text_menu_window(),
            self.get_edit_text_window(),
            self.get_edit_image_menu_window(),
            self.get_upload_image_window(),
            self.get_new_image_confirm_window(),
            self.get_combine_images_choice_window(),
            self.get_combine_images_upload_window(),
            self.get_combine_images_prompt_window(),
            self.get_social_network_select_window(),
            self.get_text_too_long_alert_window(),
            self.get_publication_success_window()
        )

    def get_moderation_list_window(self) -> Window:
        return Window(
            Multi(
                Const("üîç <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π</b><br><br>"),
                Case(
                    {
                        True: Multi(
                            Format("{publication_text}<br><br>"),
                            Format("üë§ <b>–ê–≤—Ç–æ—Ä:</b> {creator_name}<br>"),
                            Format("üè∑Ô∏è <b>–†—É–±—Ä–∏–∫–∞:</b> {category_name}<br>"),
                            Format("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> <code>{created_at}</code><br>"),
                        ),
                        False: Multi(
                            Const("‚úÖ <b>–ù–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b><br><br>"),
                            Const("üí´ <i>–í—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∏</i>"),
                        ),
                    },
                    selector="has_publications"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="preview_image_media",
                when="has_image",
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥"),
                    id="prev_publication",
                    on_click=self.moderation_publication_service.handle_navigate_publication,
                    when="has_prev",
                ),
                Button(
                    Format("üìä {current_index}/{total_count}"),
                    id="counter",
                    on_click=lambda c, b, d: c.answer("üìà –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º"),
                    when="has_publications",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥"),
                    id="next_publication",
                    on_click=self.moderation_publication_service.handle_navigate_publication,
                    when="has_next",
                ),
                when="has_publications",
            ),

            Column(
                Row(
                    Button(
                        Const("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                        id="edit",
                        on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_preview),
                    ),
                    Button(
                        Const("üåê –í—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"),
                        id="select_social_network",
                        on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.social_network_select,
                                                             ShowMode.EDIT),
                    ),
                ),
                Row(
                    Button(
                        Const("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å"),
                        id="approve",
                        on_click=self.moderation_publication_service.handle_publish_now,
                    ),
                    Button(
                        Const("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"),
                        id="reject_with_comment",
                        on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.reject_comment),
                    ),
                ),
                when="has_publications",
            ),

            Row(
                Button(
                    Const("‚óÄÔ∏è –ú–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"),
                    id="back_to_content_menu",
                    on_click=self.moderation_publication_service.handle_back_to_content_menu,
                ),
            ),

            state=model.ModerationPublicationStates.moderation_list,
            getter=self.moderation_publication_getter.get_moderation_list_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_reject_comment_window(self) -> Window:
        return Window(
            Multi(
                Const("‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b><br><br>"),
                Format("üë§ <b>–ê–≤—Ç–æ—Ä:</b> {creator_name}<br><br>"),
                Const("üí¨ <b>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b><br>"),
                Const("üíå <i>–ê–≤—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º</i><br><br>"),
                Case(
                    {
                        True: Multi(
                            Const("üìÑ <b>–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b><br>"),
                            Format("üí≠ <i>¬´{reject_comment}¬ª</i>"),
                        ),
                        False: Const("‚å®Ô∏è <i>–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...</i>"),
                    },
                    selector="has_comment"
                ),
                sep="",
            ),

            TextInput(
                id="reject_comment_input",
                on_success=self.moderation_publication_service.handle_reject_comment_input,
            ),

            Row(
                Button(
                    Const("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"),
                    id="send_rejection",
                    on_click=self.moderation_publication_service.handle_send_rejection,
                    when="has_comment",
                ),
                Button(
                    Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    id="back_to_moderation_list",
                    on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.moderation_list),
                ),
            ),

            state=model.ModerationPublicationStates.reject_comment,
            getter=self.moderation_publication_getter.get_reject_comment_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_preview_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b><br><br>"),
                Format("{publication_text}<br><br>"),
                Format("üë§ <b>–ê–≤—Ç–æ—Ä:</b> {creator_name}<br>"),
                Format("üè∑Ô∏è <b>–†—É–±—Ä–∏–∫–∞:</b> {category_name}<br>"),
                Format("üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> <code>{created_at}</code><br>"),
                Case(
                    {
                        True: Format("<br>üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {current_image_index} –∏–∑ {total_images}</b>"),
                        False: Const(""),
                    },
                    selector="has_multiple_images"
                ),
                Case(
                    {
                        True: Const("<br><br>‚ö†Ô∏è <b><i>–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!</i></b>"),
                        False: Const(""),
                    },
                    selector="has_changes"
                ),
                Const("<br><br>üìå <b>–ß—Ç–æ –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å?</b>"),
                sep="",
            ),

            DynamicMedia(
                selector="preview_image_media",
                when="has_image",
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                    id="prev_image",
                    on_click=self.moderation_publication_service.handle_prev_image,
                    when="has_multiple_images",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                    id="next_image",
                    on_click=self.moderation_publication_service.handle_next_image,
                    when="has_multiple_images",
                ),
                when="has_multiple_images",
            ),

            Column(
                Button(
                    Const("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"),
                    id="edit_text_menu",
                    on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_text_menu),
                ),
                Button(
                    Const("üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                    id="edit_image",
                    on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_image_menu),
                ),
            ),

            Row(
                Button(
                    Const("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
                    id="save_edits",
                    on_click=self.moderation_publication_service.handle_save_edits,
                    when="has_changes",
                ),
                Button(
                    Const("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"),
                    id="back_to_moderation_list",
                    on_click=self.moderation_publication_service.handle_back_to_moderation_list,
                ),
            ),

            state=model.ModerationPublicationStates.edit_preview,
            getter=self.moderation_publication_getter.get_edit_preview_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_text_menu_window(self) -> Window:
        return Window(
            Multi(
                Case(
                    {
                        False: Multi(
                            Const("‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b><br>"),
                            Format("<blockquote>{publication_text}</blockquote><br>"),
                            Const("üéØ <b>–ö–ê–ö –ò–ó–ú–ï–ù–ò–¢–¨ –¢–ï–ö–°–¢:</b><br><br>"),
                            Const("üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b><br>"),
                            Const("<i>–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å</i><br>"),
                            Const("üé§ <b>–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ</b><br>"),
                            Const("<i>–û–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–º</i><br><br>"),
                            Const("üîò <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ</b>"),
                        ),
                        True: Case(
                            {
                                True: Multi(
                                    Format("üìù <b>–í–∞—à–∏ —É–∫–∞–∑–∞–Ω–∏—è:</b><br><code>{regenerate_prompt}</code><br>"),
                                    Const("‚è≥ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...</b><br>"),
                                    Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                                ),
                                False: Multi(
                                    Const("‚è≥ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...</b><br>"),
                                    Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                                ),
                            },
                            selector="has_regenerate_prompt"
                        )
                    },
                    selector="is_regenerating_text"
                ),
                # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                Case(
                    {
                        True: Const("<br>üîÑ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>"),
                        False: Const(""),
                    },
                    selector="voice_transcribe"
                ),
                # –û—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
                Case(
                    {
                        True: Const("<br>‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∑–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"),
                        False: Const(""),
                    },
                    selector="has_void_regenerate_prompt"
                ),
                Case(
                    {
                        True: Const("<br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_regenerate_prompt"
                ),
                Case(
                    {
                        True: Const("<br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è</b><br><i>–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_regenerate_prompt"
                ),
                Case(
                    {
                        True: Const("<br>üé§ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_content_type"
                ),
                sep="",
            ),

            MessageInput(
                func=self.moderation_publication_service.handle_regenerate_text_prompt_input,
            ),

            Column(
                Button(
                    Const("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"),
                    id="regenerate_all",
                    on_click=self.moderation_publication_service.handle_regenerate_text,
                    when=~F["is_regenerating_text"]
                ),
                Button(
                    Const("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç"),
                    id="edit_content",
                    on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_text, ShowMode.EDIT),
                    when=~F["is_regenerating_text"]
                ),
            ),
            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="preview",
                on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_preview, ShowMode.EDIT),
                when=~F["is_regenerating_text"]
            ),

            state=model.ModerationPublicationStates.edit_text_menu,
            getter=self.moderation_publication_getter.get_edit_publication_text_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_text_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç</b><br>"),
                Format("<blockquote>{publication_text}</blockquote><br>"),
                Const("‚úèÔ∏è <b>–ù–ê–ü–ò–®–ò–¢–ï –ù–û–í–´–ô –¢–ï–ö–°–¢:</b><br>"),
                Const("<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π</i><br><br>"),
                # Error messages
                Case(
                    {
                        True: Const("<br><br>‚ùå <b>–û—à–∏–±–∫–∞:</b> –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
                        False: Const(""),
                    },
                    selector="has_void_text"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç</b><br><i>–ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_text"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b><br><i>–ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_text"
                ),
                sep="",
            ),

            TextInput(
                id="text_input",
                on_success=self.moderation_publication_service.handle_edit_text,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="edit_text_menu",
                on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_text_menu, ShowMode.EDIT),
            ),

            state=model.ModerationPublicationStates.edit_text,
            getter=self.moderation_publication_getter.get_edit_publication_text_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_edit_image_menu_window(self) -> Window:
        return Window(
            Multi(
                Case(
                    {
                        False: Const(""),
                        True: Multi(
                            Const("‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b><br>"),
                            Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                        ),
                    },
                    selector="is_generating_image"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="preview_image_media",
                when="has_image",
            ),

            Multi(
                Case(
                    {
                        True: Multi(
                            Const("üéØ <b>–ß–¢–û –ú–û–ñ–ù–û –°–î–ï–õ–ê–¢–¨:</b><br><br>"),
                            Const("üí¨ <b>–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ üé§ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ</b><br>"),
                            Const("<i>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Å —É—á—ë—Ç–æ–º –≤–∞—à–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π</i><br>"),
                            Const("üîò <b>–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\"</b><br>"),
                            Const("<i>–ò–ò —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</i><br><br>"),
                            Const("üìù <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:</b><br>"),
                            Const("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∏ –æ—Å–≤–µ—â–µ–Ω–∏—è<br>"),
                            Const("‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤<br>"),
                            Const("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è<br>"),
                            Const("‚Ä¢ –ü—Ä–∞–≤–∫–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ —Ñ–æ–Ω–∞"),
                        ),
                        False: Multi(
                            Const("üéØ <b>–ß–¢–û –ú–û–ñ–ù–û –°–î–ï–õ–ê–¢–¨:</b><br><br>"),
                            Const("üîò <b>–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\"</b><br>"),
                            Const("<i>–ò–ò —Å–æ–∑–¥–∞—Å—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</i><br><br>"),
                            Const("üí¨ <b>–ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ üé§ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ</b><br>"),
                            Const("<i>–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è —Å —É—á—ë—Ç–æ–º –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è</i><br>"),
                            Const("üìù <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:</b><br>"),
                            Const("‚Ä¢ üë• –û–±—ä–µ–∫—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏<br>"),
                            Const("‚Ä¢ üé≠ –°—Ç–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ<br>"),
                            Const("‚Ä¢ üåç –§–æ–Ω –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ<br>"),
                            Const("‚Ä¢ ‚ú® –î–µ—Ç–∞–ª–∏ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ"),
                        ),
                    },
                    selector="has_image"
                ),
                Case(
                    {
                        True: Const("<br><br>üîÑ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>"),
                        False: Const(""),
                    },
                    selector="voice_transcribe"
                ),
                Case(
                    {
                        True: Const("<br><br>‚ùå <b>–û—à–∏–±–∫–∞:</b> –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
                        False: Const(""),
                    },
                    selector="has_void_image_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_image_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_image_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üé§ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_content_type"
                ),
                when=~F["is_generating_image"],
                sep="",
            ),

            MessageInput(
                func=self.moderation_publication_service.handle_generate_image_prompt_input,
            ),

            Column(
                Button(
                    Const("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"),
                    id="generate_image",
                    on_click=self.moderation_publication_service.handle_generate_new_image,
                ),
                Button(
                    Const("üì∑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—ë —Ñ–æ—Ç–æ"),
                    id="upload_image",
                    on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.upload_image, ShowMode.EDIT),
                ),
                Button(
                    Const("üìê –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
                    id="combine_images",
                    on_click=self.moderation_publication_service.handle_combine_images_start,
                ),
                Button(
                    Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                    id="remove_image",
                    on_click=self.moderation_publication_service.handle_remove_image,
                    when="has_image",
                ),
                when=~F["is_generating_image"]
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="preview",
                on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_preview, ShowMode.EDIT),
                when=~F["is_generating_image"]
            ),

            state=model.ModerationPublicationStates.edit_image_menu,
            getter=self.moderation_publication_getter.get_image_menu_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_upload_image_window(self) -> Window:
        return Window(
            Multi(
                Const("üì∑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b><br><br>"),
                Const("üì§ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i><br><br>"),
                Const("üìã <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> JPG, PNG, GIF<br>"),
                Const("üìè <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:</b> 10 –ú–ë"),
                Case(
                    {
                        True: Const(
                            "<br><br>‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</b><br>‚ö†Ô∏è <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞)</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_image_type"
                ),
                Case(
                    {
                        True: Const("<br><br>üìÅ <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b><br>‚ö†Ô∏è <i>–ú–∞–∫—Å–∏–º—É–º 10 –ú–ë</i>"),
                        False: Const(""),
                    },
                    selector="has_big_image_size"
                ),
                Case(
                    {
                        True: Const(
                            "<br><br>üí• <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b><br>üîÑ <i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ</i>"),
                        False: Const(""),
                    },
                    selector="has_image_processing_error"
                ),
                sep="",
            ),

            MessageInput(
                func=self.moderation_publication_service.handle_image_upload,
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="image_menu",
                on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_image_menu, ShowMode.EDIT),
            ),

            state=model.ModerationPublicationStates.upload_image,
            getter=self.moderation_publication_getter.get_upload_image_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_social_network_select_window(self) -> Window:
        return Window(
            Multi(
                Const("üåê <b>–í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b><br><br>"),
                Case(
                    {
                        True: Multi(
                            Const("‚ö†Ô∏è <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!</b><br><br>"),
                            Const(
                                "üîó <i>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</i><br><br>"),
                            Const("üë®‚Äçüíº <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</b>"),
                        ),
                        False: Multi(
                            Const("üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b><br><br>"),
                            Const("üí° <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</i>"),
                        ),
                    },
                    selector="no_connected_networks"
                ),
                sep="",
            ),

            Column(
                Checkbox(
                    Const("‚úÖ üì± Telegram"),
                    Const("‚¨ú üì± Telegram"),
                    id="telegram_checkbox",
                    default=False,
                    on_state_changed=self.moderation_publication_service.handle_toggle_social_network,
                    when="telegram_connected",
                ),
                Checkbox(
                    Const("‚úÖ üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"),
                    Const("‚¨ú üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"),
                    id="vkontakte_checkbox",
                    default=False,
                    on_state_changed=self.moderation_publication_service.handle_toggle_social_network,
                    when="vkontakte_connected",
                ),
                when="has_available_networks",
            ),

            Row(
                Button(
                    Const("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"),
                    id="back_to_preview",
                    on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.moderation_list,
                                                         ShowMode.EDIT),
                ),
            ),

            state=model.ModerationPublicationStates.social_network_select,
            getter=self.moderation_publication_getter.get_social_network_select_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_text_too_long_alert_window(self) -> Window:
        return Window(
            Multi(
                Const("‚ö†Ô∏è <b>–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π</b><br><br>"),
                Format("üìè <b>–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞:</b> {current_text_length} —Å–∏–º–≤–æ–ª–æ–≤<br>"),
                Format("üìä <b>–ú–∞–∫—Å–∏–º—É–º —Å —Ñ–æ—Ç–æ:</b> {max_length_with_image} —Å–∏–º–≤–æ–ª–æ–≤<br><br>"),
                Const("üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b><br>"),
                Const("‚Ä¢ <b>–°–∂–∞—Ç—å —Ç–µ–∫—Å—Ç</b> ‚Äî –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã<br>"),
                Const("‚Ä¢ <b>–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ñ–æ—Ç–æ</b> ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º"),
                sep="",
            ),

            Column(
                Button(
                    Const("üìù –°–∂–∞—Ç—å —Ç–µ–∫—Å—Ç"),
                    id="compress_text",
                    on_click=self.moderation_publication_service.handle_compress_text,
                ),
                Button(
                    Const("üóëÔ∏è –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ñ–æ—Ç–æ"),
                    id="remove_photo",
                    on_click=self.moderation_publication_service.handle_remove_photo_from_long_text,
                ),
                Button(
                    Const("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç"),
                    id="restore_previous",
                    on_click=self.moderation_publication_service.handle_restore_previous_text,
                    when="has_previous_text",
                ),
            ),

            state=model.ModerationPublicationStates.text_too_long_alert,
            getter=self.moderation_publication_getter.get_text_too_long_alert_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_publication_success_window(self) -> Window:
        return Window(
            Multi(
                Const("üéâ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞!</b><br>"),
                Case(
                    {
                        True: Multi(
                            Const("üîó <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ –ø–æ—Å—Ç—ã:</b><br>"),
                            Case(
                                {
                                    True: Format(
                                        "üì± <b>Telegram:</b> <a href='{telegram_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a><br>"),
                                    False: Const(""),
                                },
                                selector="has_telegram_link"
                            ),
                            Case(
                                {
                                    True: Format(
                                        "üîµ <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:</b> <a href='{vkontakte_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a><br>"),
                                    False: Const(""),
                                },
                                selector="has_vkontakte_link"
                            ),
                            Const("<br>üí° <i>–°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\"</i>"),
                        ),
                        False: Const("üìù <i>–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞, –Ω–æ —Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</i>"),
                    },
                    selector="has_post_links"
                ),
                sep="",
            ),

            Button(
                Const("üìã –ö —Å–ø–∏—Å–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
                id="go_to_content_menu",
                on_click=self.moderation_publication_service.handle_back_to_moderation_list,
            ),

            state=model.ModerationPublicationStates.publication_success,
            getter=self.moderation_publication_getter.get_publication_success_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_new_image_confirm_window(self) -> Window:
        return Window(
            Multi(
                Case(
                    {
                        False: Multi(
                            Const("üñºÔ∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b><br><br>"),
                            Case(
                                {
                                    True: Multi(
                                        Case(
                                            {
                                                True: Const("üìç <b>–ü–æ–∫–∞–∑–∞–Ω–æ:</b> —Å—Ç–∞—Ä–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞<br><br>"),
                                                False: Const("üìç <b>–ü–æ–∫–∞–∑–∞–Ω–æ:</b> –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞<br><br>"),
                                            },
                                            selector="showing_old_image"
                                        ),
                                    ),
                                    False: Const(""),
                                },
                                selector="has_old_image"
                            ),
                            Const("üí° <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</b><br>"),
                            Const("‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å<br>"),
                            Const("‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è<br><br>"),
                            Const("üí¨ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∫–∞–º–∏, –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ</i>"),
                        ),
                        True: Multi(
                            Const("‚è≥ <b>–ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–∞–≤–∫–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é...</b><br>"),
                            Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                        ),
                    },
                    selector="is_applying_edits"
                ),
                Case(
                    {
                        True: Format("<br><br>üìù <b>–í–∞—à–∏ –ø—Ä–∞–≤–∫–∏:</b><br><i>{edit_image_prompt}</i>"),
                        False: Const(""),
                    },
                    selector="has_image_edit_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üîÑ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>"),
                        False: Const(""),
                    },
                    selector="voice_transcribe"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–∫</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_edit_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–∫</b><br><i>–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_edit_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üé§ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_content_type"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="new_image_media",
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è –°—Ç–∞—Ä–∞—è"),
                    id="show_old_image",
                    on_click=self.moderation_publication_service.handle_show_old_image,
                    when=F["has_old_image"] & F["showing_new_image"] & ~F["is_applying_edits"]
                ),
                Button(
                    Const("‚û°Ô∏è –ù–æ–≤–∞—è"),
                    id="show_new_image",
                    on_click=self.moderation_publication_service.handle_show_new_image,
                    when=F["has_old_image"] & F["showing_old_image"] & ~F["is_applying_edits"]
                ),
                when="has_old_image",
            ),

            MessageInput(
                func=self.moderation_publication_service.handle_edit_image_prompt_input_from_confirm_new_image,
            ),

            Column(
                Button(
                    Const("üìê –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–æ—Ç–æ"),
                    id="combine_from_new_image",
                    on_click=self.moderation_publication_service.handle_combine_image_from_new_image,
                    when=~F["is_applying_edits"]
                ),
                Row(
                    Button(
                        Const("‚úÖ –ü—Ä–∏–Ω—è—Ç—å"),
                        id="confirm_new_image",
                        on_click=self.moderation_publication_service.handle_confirm_new_image,
                        when=~F["is_applying_edits"]
                    ),
                    Button(
                        Const("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"),
                        id="reject_new_image",
                        on_click=self.moderation_publication_service.handle_reject_new_image,
                        when=~F["is_applying_edits"]
                    ),
                ),
            ),

            state=model.ModerationPublicationStates.new_image_confirm,
            getter=self.moderation_publication_getter.get_new_image_confirm_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_combine_images_choice_window(self) -> Window:
        return Window(
            Multi(
                Const("üìê <b>–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b><br><br>"),
                Case(
                    {
                        True: Multi(
                            Const("üñºÔ∏è <i>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</i><br><br>"),
                            Const("üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"),
                        ),
                        False: Multi(
                            Const("üì§ <i>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç 2 –¥–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è</i>"),
                        ),
                    },
                    selector="has_image"
                ),
                sep="",
            ),

            Column(
                Button(
                    Const("‚ûï –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º"),
                    id="combine_with_current",
                    on_click=self.moderation_publication_service.handle_combine_with_current_image,
                    when="has_image",
                ),
                Button(
                    Const("üîÑ –ù–∞—á–∞—Ç—å —Å –Ω–æ–≤—ã—Ö"),
                    id="combine_from_scratch",
                    on_click=self.moderation_publication_service.handle_combine_image_from_scratch,
                    when="has_image",
                ),
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_image_menu",
                on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.edit_image_menu, ShowMode.EDIT),
            ),

            state=model.ModerationPublicationStates.combine_images_choice,
            getter=self.moderation_publication_getter.get_combine_images_choice_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_combine_images_upload_window(self) -> Window:
        return Window(
            Multi(
                Const("üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b><br><br>"),
                Case(
                    {
                        True: Format("üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {combine_images_count} –∏–∑ 3</b><br>"),
                        False: Const(""),
                    },
                    selector="has_combine_images"
                ),
                Case(
                    {
                        True: Format("<br>üìç <b>–°–µ–π—á–∞—Å –ø–æ–∫–∞–∑–∞–Ω–æ:</b> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {combine_current_index} –∏–∑ {combine_images_count}"),
                        False: Const(""),
                    },
                    selector="has_multiple_combine_images"
                ),
                Const("üì∑ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 3)</i><br>"),
                Const("üí° <i>–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ \"–î–∞–ª–µ–µ\"</i>"),
                # Error messages
                Case(
                    {
                        True: Const(
                            "<br><br>‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞)</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_combine_image_type"
                ),
                Case(
                    {
                        True: Const("<br><br>üìÅ <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b><br><i>–ú–∞–∫—Å–∏–º—É–º 10 –ú–ë</i>"),
                        False: Const(""),
                    },
                    selector="has_big_combine_image_size"
                ),
                Case(
                    {
                        True: Const("<br><br>‚ö†Ô∏è <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç</b><br><i>–ú–∞–∫—Å–∏–º—É–º 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>"),
                        False: Const(""),
                    },
                    selector="combine_images_limit_reached"
                ),
                Case(
                    {
                        True: Const("<br><br>‚ö†Ô∏è <b>–ú–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b><br><i>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>"),
                        False: Const(""),
                    },
                    selector="not_enough_combine_images"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="combine_current_image_media",
                when="has_combine_images",
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"),
                    id="prev_combine_image",
                    on_click=self.moderation_publication_service.handle_prev_combine_image,
                    when="has_multiple_combine_images",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"),
                    id="next_combine_image",
                    on_click=self.moderation_publication_service.handle_next_combine_image,
                    when="has_multiple_combine_images",
                ),
                when="has_multiple_combine_images",
            ),

            MessageInput(
                func=self.moderation_publication_service.handle_combine_image_upload,
            ),

            Column(
                Button(
                    Const("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ"),
                    id="delete_combine_image",
                    on_click=self.moderation_publication_service.handle_delete_combine_image,
                    when="has_combine_images",
                ),
                Button(
                    Const("‚ñ∂Ô∏è –î–∞–ª–µ–µ"),
                    id="next_to_prompt",
                    on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.combine_images_prompt, ShowMode.EDIT),
                    when="has_enough_combine_images",
                ),
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_from_combine_upload",
                on_click=self.moderation_publication_service.handle_back_from_combine_image_upload,
            ),

            state=model.ModerationPublicationStates.combine_images_upload,
            getter=self.moderation_publication_getter.get_combine_images_upload_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_combine_images_prompt_window(self) -> Window:
        return Window(
            Multi(
                Case(
                    {
                        False: Multi(
                            Const("‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ</b><br><br>"),
                            Format("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {combine_current_index} –∏–∑ {combine_images_count}<br><br>"),
                            Const("üí¨ <b>–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ:</b><br><br>"),
                            Const("üì∏ <b>–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–æ—Ç–æ:</b><br>"),
                            Const("‚Ä¢ –ß—Ç–æ –≤–∑—è—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ/–≤—Ç–æ—Ä–æ–≥–æ/—Ç—Ä–µ—Ç—å–µ–≥–æ —Ñ–æ—Ç–æ<br>"),
                            Const("‚Ä¢ –ö–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (—á–µ–ª–æ–≤–µ–∫, —Ñ–æ–Ω, –æ–±—ä–µ–∫—Ç—ã)<br>"),
                            Const("‚Ä¢ –ß—Ç–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º —Ñ–æ—Ç–æ<br><br>"),
                            Const("üé® <b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:</b><br>"),
                            Const("‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ (—Ñ–æ—Ç–æ —Ä—è–¥–æ–º —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)<br>"),
                            Const("‚Ä¢ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ (—Ñ–æ—Ç–æ –æ–¥–Ω–æ –ø–æ–¥ –¥—Ä—É–≥–∏–º)<br>"),
                            Const("‚Ä¢ –ö–æ–ª–ª–∞–∂ (–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)<br>"),
                            Const("‚Ä¢ –ù–∞–ª–æ–∂–µ–Ω–∏–µ (–æ–¥–Ω–æ —Ñ–æ—Ç–æ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–æ–≥–æ)<br><br>"),
                            Const("‚úèÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b><br>"),
                            Const("‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–º–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ñ–æ—Ç–æ<br>"),
                            Const("‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤<br>"),
                            Const("‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–≤–µ—Ç–∞, —è—Ä–∫–æ—Å—Ç—å, —Ñ–∏–ª—å—Ç—Ä—ã<br>"),
                            Const("‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏–¥–µ–∏ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏<br><br>"),
                            Const("üé§ <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i><br>"),
                            Const("‚è≠Ô∏è <i>–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ ‚Äî –ò–ò —Å–∞–º —Ä–µ—à–∏—Ç, –∫–∞–∫ –ª—É—á—à–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–æ—Ç–æ</i>"),
                        ),
                        True: Multi(
                            Const("‚è≥ <b>–û–±—ä–µ–¥–∏–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</b><br>"),
                            Const("üïê <i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</i>"),
                        ),
                    },
                    selector="is_combining_images"
                ),
                Case(
                    {
                        True: Const("<br><br>üîÑ <b>–†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>"),
                        False: Const(""),
                    },
                    selector="voice_transcribe"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_small_combine_image_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b><br><i>–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_big_combine_image_prompt"
                ),
                Case(
                    {
                        True: Const("<br><br>üé§ <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b><br><i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_content_type"
                ),
                sep="",
            ),

            DynamicMedia(
                selector="combine_current_image_media",
                when="has_combine_images",
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"),
                    id="prev_combine_image_prompt",
                    on_click=self.moderation_publication_service.handle_prev_combine_image,
                    when="has_multiple_combine_images",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è"),
                    id="next_combine_image_prompt",
                    on_click=self.moderation_publication_service.handle_next_combine_image,
                    when="has_multiple_combine_images",
                ),
                when=~F["is_combining_images"],
            ),

            MessageInput(
                func=self.moderation_publication_service.handle_combine_image_prompt_input,
            ),

            Button(
                Const("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
                id="skip_prompt",
                on_click=self.moderation_publication_service.handle_skip_combine_image_prompt,
                when=~F["is_combining_images"]
            ),

            Button(
                Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                id="back_to_upload",
                on_click=lambda c, b, d: d.switch_to(model.ModerationPublicationStates.combine_images_upload, ShowMode.EDIT),
                when=~F["is_combining_images"]
            ),

            state=model.ModerationPublicationStates.combine_images_prompt,
            getter=self.moderation_publication_getter.get_combine_images_prompt_data,
            parse_mode=SULGUK_PARSE_MODE,
        )