from aiogram_dialog import Window, Dialog, ShowMode
from aiogram_dialog.widgets.text import Const, Format, Multi, Case
from aiogram_dialog.widgets.kbd import Button, Column, Row, Back, Select
from aiogram_dialog.widgets.input import TextInput
from sulguk import SULGUK_PARSE_MODE

from internal import interface, model


class AddEmployeeDialog(interface.IAddEmployeeDialog):

    def __init__(
            self,
            tel: interface.ITelemetry,
            add_employee_service: interface.IAddEmployeeService,
            add_employee_getter: interface.IAddEmployeeGetter,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.add_employee_service = add_employee_service
        self.add_employee_getter = add_employee_getter

    def get_dialog(self) -> Dialog:
        return Dialog(
            self.get_enter_account_id_window(),
            self.get_enter_name_window(),
            self.get_enter_role_window(),
            self.get_set_permissions_window(),
            self.get_confirm_employee_window(),
        )

    def get_enter_account_id_window(self) -> Window:
        return Window(
            Multi(
                Const("üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b><br><br>"),
                Const("üìù <b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞<br><br>"),
                Const("üí° <b>–ö–∞–∫ –Ω–∞–π—Ç–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞:</b><br>"),
                Const("‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ<br>"),
                Const("‚Ä¢ ID –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏<br><br>"),
                Const("‚ö†Ô∏è <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ</i>"),
                Case(
                    {
                        True: Const("<br><br>‚ùå <b>–û—à–∏–±–∫–∞:</b> ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
                        False: Const(""),
                    },
                    selector="has_void_account_id"
                ),
                Case(
                    {
                        True: Const("<br><br>‚ùå <b>–û—à–∏–±–∫–∞:</b> ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"),
                        False: Const(""),
                    },
                    selector="has_invalid_account_id"
                ),
                Const("<br><br>üî¢ <b>–í–≤–µ–¥–∏—Ç–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞:</b>"),
                Case(
                    {
                        True: Format("<br>üìå <b>–í–≤–µ–¥–µ–Ω–Ω—ã–π ID:</b> <code>{account_id}</code>"),
                        False: Const("<br>‚å®Ô∏è <i>–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ ID –∞–∫–∫–∞—É–Ω—Ç–∞...</i>"),
                    },
                    selector="has_account_id"
                ),
                sep="",
            ),

            TextInput(
                id="account_id_input",
                on_success=self.add_employee_service.handle_account_id_input,
            ),

            Row(
                Button(
                    Const("‚û°Ô∏è –î–∞–ª–µ–µ"),
                    id="next_to_name",
                    on_click=lambda c, b, d: d.switch_to(model.AddEmployeeStates.enter_name, ShowMode.EDIT),
                    when="has_account_id"
                ),
                Button(
                    Const("‚óÄÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π"),
                    id="go_to_organization_menu",
                    on_click=self.add_employee_service.handle_go_to_organization_menu,
                ),
            ),

            state=model.AddEmployeeStates.enter_account_id,
            getter=self.add_employee_getter.get_enter_account_id_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_enter_name_window(self) -> Window:
        return Window(
            Multi(
                Const("üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b><br><br>"),
                Const("üìù <b>–®–∞–≥ 2/4:</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞<br><br>"),
                Format("üî¢ <b>ID –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{account_id}</code><br><br>"),
                Const("üëã <b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b><br>"),
                Const("üí° <i>–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö</i>"),
                Case(
                    {
                        True: Const("<br><br>‚ùå <b>–û—à–∏–±–∫–∞:</b> –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"),
                        False: Const(""),
                    },
                    selector="has_void_name"
                ),
                Case(
                    {
                        True: Const("<br><br>üìè <b>–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏</b><br>‚ö†Ô∏è <i>–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤</i>"),
                        False: Const(""),
                    },
                    selector="has_invalid_name_length"
                ),
                Case(
                    {
                        True: Format("<br><br>üìå <b>–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è:</b> {name}"),
                        False: Const("<br><br>‚å®Ô∏è <i>–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏...</i>"),
                    },
                    selector="has_name"
                ),
                sep="",
            ),

            TextInput(
                id="name_input",
                on_success=self.add_employee_service.handle_name_input,
            ),

            Row(
                Button(
                    Const("‚û°Ô∏è –î–∞–ª–µ–µ"),
                    id="next_to_role",
                    on_click=lambda c, b, d: d.switch_to(model.AddEmployeeStates.enter_role, ShowMode.EDIT),
                    when="has_name"
                ),
                Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
            ),

            state=model.AddEmployeeStates.enter_name,
            getter=self.add_employee_getter.get_enter_name_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_enter_role_window(self) -> Window:
        return Window(
            Multi(
                Const("üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b><br><br>"),
                Const("üìù <b>–®–∞–≥ 3/4:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞<br><br>"),
                Format("üî¢ <b>ID –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{account_id}</code><br>"),
                Format("üë§ <b>–ò–º—è:</b> {name}<br><br>"),
                Const("üé≠ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–æ–ª—å:</b><br>"),
                Const("üí° <i>–†–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</i>"),
                Case(
                    {
                        True: Format("<br><br>üìå <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å:</b> {selected_role_display}"),
                        False: Const("<br><br>üëá <i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ...</i>"),
                    },
                    selector="has_selected_role"
                ),
                sep="",
            ),

            Column(
                Select(
                    Format("üéØ {item[title]}"),
                    id="role_select",
                    items="roles",
                    item_id_getter=lambda item: item["value"],
                    on_click=self.add_employee_service.handle_role_selection,
                ),
            ),

            Row(
                Button(
                    Const("‚û°Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"),
                    id="next_to_permissions",
                    on_click=lambda c, b, d: d.switch_to(model.AddEmployeeStates.set_permissions, ShowMode.EDIT),
                    when="has_selected_role"
                ),
                Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
            ),

            state=model.AddEmployeeStates.enter_role,
            getter=self.add_employee_getter.get_enter_role_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_set_permissions_window(self) -> Window:
        return Window(
            Multi(
                Const("üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b><br><br>"),
                Const("üìù <b>–®–∞–≥ 4/4:</b> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞<br><br>"),
                Format("üî¢ <b>ID –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{account_id}</code><br>"),
                Format("üë§ <b>–ò–º—è:</b> {name}<br>"),
                Format("üé≠ <b>–†–æ–ª—å:</b> {role}<br><br>"),
                Const("‚öôÔ∏è <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b><br>"),
                Const("üëÜ <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –µ–≥–æ</i>"),
                sep="",
            ),

            Column(
                Button(
                    Format("{required_moderation_icon} –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
                    id="toggle_required_moderation",
                    on_click=self.add_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{autoposting_icon} –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥"),
                    id="toggle_autoposting",
                    on_click=self.add_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{add_employee_icon} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
                    id="toggle_add_employee",
                    on_click=self.add_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{edit_permissions_icon} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏"),
                    id="toggle_edit_permissions",
                    on_click=self.add_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{top_up_balance_icon} –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"),
                    id="toggle_top_up_balance",
                    on_click=self.add_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{sign_up_social_networks_icon} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π"),
                    id="toggle_sign_up_social_networks",
                    on_click=self.add_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{setting_category_icon} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É–±—Ä–∏–∫"),
                    id="toggle_setting_category",
                    on_click=self.add_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{setting_organization_icon} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"),
                    id="toggle_setting_organization",
                    on_click=self.add_employee_service.handle_toggle_permission,
                ),
            ),

            Row(
                Button(
                    Const("‚û°Ô∏è –ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"),
                    id="next_to_confirm",
                    on_click=lambda c, b, d: d.switch_to(model.AddEmployeeStates.confirm_employee, ShowMode.EDIT),
                ),
                Back(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥")),
            ),

            state=model.AddEmployeeStates.set_permissions,
            getter=self.add_employee_getter.get_permissions_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_confirm_employee_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b><br><br>"),
                Const("üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b><br><br>"),
                Format("üî¢ <b>ID –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{account_id}</code><br>"),
                Format("üë§ <b>–ò–º—è:</b> {name}<br>"),
                Format("üé≠ <b>–†–æ–ª—å:</b> {role}<br><br>"),
                Const("‚öôÔ∏è <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b><br>"),
                Format("{permissions_text}<br><br>"),
                Const("‚ùì <b>–í—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ? –°–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?</b>"),
                sep="",
            ),

            Row(
                Button(
                    Const("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
                    id="create_employee",
                    on_click=self.add_employee_service.handle_create_employee,
                ),
                Back(
                    Const("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
                ),
            ),

            state=model.AddEmployeeStates.confirm_employee,
            getter=self.add_employee_getter.get_confirm_data,
            parse_mode=SULGUK_PARSE_MODE,
        )