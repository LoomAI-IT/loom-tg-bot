from typing import Any

from aiogram import Bot
from aiogram.types import CallbackQuery, Message
from aiogram_dialog import DialogManager, StartMode

from opentelemetry.trace import SpanKind, Status, StatusCode

from internal import interface, model


class PublicationDraftService(interface.IPublicationDraftService):
    def __init__(
            self,
            tel: interface.ITelemetry,
            bot: Bot,
            state_repo: interface.IStateRepo,
            loom_content_client: interface.ILoomContentClient,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.bot = bot
        self.state_repo = state_repo
        self.loom_content_client = loom_content_client

    async def handle_select_publication(
            self,
            callback: CallbackQuery,
            widget: Any,
            dialog_manager: DialogManager,
            publication_id: str
    ) -> None:
        """
        üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ë–û–†–ê –ß–ï–†–ù–û–í–ò–ö–ê
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–≤—å—é
        """
        with self.tracer.start_as_current_span(
                "PublicationDraftService.handle_select_publication",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                dialog_manager.dialog_data["selected_publication_id"] = int(publication_id)
                
                self.logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {publication_id}")

                # üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                await dialog_manager.switch_to(model.PublicationDraftStates.edit_preview)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
                raise

    async def handle_navigate_publication(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """
        üéÆ –ù–ê–í–ò–ì–ê–¶–ò–Ø –º–µ–∂–¥—É —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ (—Å—Ç—Ä–µ–ª–∫–∏ ‚¨ÖÔ∏è‚û°Ô∏è)
        –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ navigate_employee - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
        """
        with self.tracer.start_as_current_span(
                "PublicationDraftService.handle_navigate_publication",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                button_id = button.widget_id
                all_publication_ids = dialog_manager.dialog_data.get("all_publication_ids", [])
                current_publication_id = int(dialog_manager.dialog_data.get("selected_publication_id"))

                if not all_publication_ids or current_publication_id not in all_publication_ids:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
                    return

                current_index = all_publication_ids.index(current_publication_id)

                # üîÑ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
                if button_id == "prev_publication" and current_index > 0:
                    new_publication_id = all_publication_ids[current_index - 1]
                elif button_id == "next_publication" and current_index < len(all_publication_ids) - 1:
                    new_publication_id = all_publication_ids[current_index + 1]
                else:
                    return

                # üíæ –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                dialog_manager.dialog_data["selected_publication_id"] = new_publication_id

                await dialog_manager.update(dialog_manager.dialog_data)
                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise

    async def handle_delete_publication(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """
        üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ß–ï–†–ù–û–í–ò–ö–ê
        """
        with self.tracer.start_as_current_span(
                "PublicationDraftService.handle_delete_publication",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                publication_id = int(dialog_manager.dialog_data.get("selected_publication_id"))
                
                # üóëÔ∏è –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ API
                await self.loom_content_client.delete_publication(publication_id)
                
                self.logger.info(f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω: {publication_id}")
                
                await callback.answer("‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω!", show_alert=True)
                
                # üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
                dialog_manager.dialog_data.pop("selected_publication_id", None)
                await dialog_manager.switch_to(model.PublicationDraftStates.publication_list)

                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
                raise

    async def handle_save_changes(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """
        üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
        """
        with self.tracer.start_as_current_span(
                "PublicationDraftService.handle_save_changes",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                publication_id = int(dialog_manager.dialog_data.get("selected_publication_id"))
                
                # üìù –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ dialog_data
                name = dialog_manager.dialog_data.get("publication_title")
                text = dialog_manager.dialog_data.get("publication_content") 
                tags = dialog_manager.dialog_data.get("publication_tags", [])
                
                # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
                await self.loom_content_client.change_publication(
                    publication_id=publication_id,
                    name=name,
                    text=text,
                    tags=tags
                )
                
                self.logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
                await callback.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", show_alert=True)
                span.set_status(Status(StatusCode.OK))
            except Exception as err:
                
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)
                raise

    # üìù –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ generate_publication)
    
    async def handle_edit_title_save(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            text: str
    ) -> None:
        """üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        try:
            await message.delete()
            new_title = text.strip()

            if not new_title:
                dialog_manager.dialog_data["has_void_title"] = True
                await dialog_manager.switch_to(model.PublicationDraftStates.edit_title)
                return

            # ‚úÖ –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            dialog_manager.dialog_data.pop("has_void_title", None)
            dialog_manager.dialog_data["publication_title"] = new_title

            self.logger.info("–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ")
            await dialog_manager.switch_to(model.PublicationDraftStates.edit_preview)
        except Exception as err:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
            raise

    async def handle_edit_description_save(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            text: str
    ) -> None:
        """üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            await message.delete()
            new_description = text.strip()
            
            dialog_manager.dialog_data["publication_description"] = new_description
            self.logger.info("–û–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ")
            await dialog_manager.switch_to(model.PublicationDraftStates.edit_preview)
        except Exception as err:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
            raise

    async def handle_edit_content_save(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            text: str
    ) -> None:
        """üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            await message.delete()
            new_content = text.strip()

            if not new_content:
                dialog_manager.dialog_data["has_void_content"] = True
                await dialog_manager.switch_to(model.PublicationDraftStates.edit_content)
                return

            dialog_manager.dialog_data.pop("has_void_content", None)
            dialog_manager.dialog_data["publication_content"] = new_content

            self.logger.info("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ")
            await dialog_manager.switch_to(model.PublicationDraftStates.edit_preview)
        except Exception as err:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
            raise

    async def handle_edit_tags_save(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            text: str
    ) -> None:
        """üè∑Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤"""
        try:
            await message.delete()
            tags_raw = text.strip()
            
            if tags_raw:
                tags = [tag.strip() for tag in tags_raw.split(",")]
                tags = [tag for tag in tags if tag]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
            else:
                tags = []
            
            dialog_manager.dialog_data["publication_tags"] = tags
            self.logger.info("–¢–µ–≥–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω—ã")
            await dialog_manager.switch_to(model.PublicationDraftStates.edit_preview)
        except Exception as err:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤")
            raise

    async def handle_edit_image_menu_save(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            text: str
    ) -> None:
        """üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)"""
        try:
            await message.delete()
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await message.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        except Exception as err:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            raise

    # üîÑ –†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê
    
    async def handle_regenerate_text(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """üîÑ –ü–æ–ª–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
        try:
            await callback.answer()
            await callback.message.edit_text(
                "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...",
                reply_markup=None
            )
            
            publication_id = int(dialog_manager.dialog_data.get("selected_publication_id"))
            
            # üîÑ –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ API (–Ω—É–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –≤ –∫–ª–∏–µ–Ω—Ç–µ)
            # regenerated_data = await self.loom_content_client.regenerate_publication_text(publication_id)
            
            # üíæ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ dialog_data
            # dialog_manager.dialog_data["publication_title"] = regenerated_data["name"]
            # dialog_manager.dialog_data["publication_content"] = regenerated_data["text"]
            
            await callback.message.edit_text("‚úÖ –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            await dialog_manager.switch_to(model.PublicationDraftStates.edit_preview)
        except Exception as err:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
            raise

    async def handle_regenerate_text_with_prompt(
            self,
            message: Message,
            widget: Any,
            dialog_manager: DialogManager,
            prompt: str
    ) -> None:
        """üîÑ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º"""
        try:
            await message.delete()
            prompt = prompt.strip()
            
            if not prompt:
                dialog_manager.dialog_data["has_void_regenerate_prompt"] = True
                await dialog_manager.switch_to(model.PublicationDraftStates.regenerate_text)
                return
                
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–º–ø—Ç–æ–º
            await message.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        except Exception as err:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            raise

    # üåê –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ï–¢–ò
    
    async def handle_toggle_social_network(
            self,
            callback: CallbackQuery,
            checkbox: Any,
            dialog_manager: DialogManager
    ) -> None:
        """üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π"""
        try:
            if "selected_social_networks" not in dialog_manager.dialog_data:
                dialog_manager.dialog_data["selected_social_networks"] = {}

            network_id = checkbox.widget_id
            is_checked = checkbox.is_checked()
            dialog_manager.dialog_data["selected_social_networks"][network_id] = is_checked

            await callback.answer()
        except Exception as err:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            raise

    # üöÄ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø
    
    async def handle_send_to_moderation_with_networks_publication(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
        try:
            publication_id = int(dialog_manager.dialog_data.get("selected_publication_id"))
            
            # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            await self.loom_content_client.send_publication_to_moderation(publication_id)
            
            await callback.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", show_alert=True)
            await dialog_manager.start(model.ContentMenuStates.content_menu, mode=StartMode.RESET_STACK)
        except Exception as err:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=True)
            raise

    async def handle_publish_with_selected_networks_publication(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–µ–π—á–∞—Å"""
        try:
            publication_id = int(dialog_manager.dialog_data.get("selected_publication_id"))
            
            # üöÄ –ü—É–±–ª–∏–∫—É–µ–º (–º–∏–Ω—É—è –º–æ–¥–µ—Ä–∞—Ü–∏—é): –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            state = await self._get_state(dialog_manager)
            await self.loom_content_client.moderate_publication(
                publication_id=publication_id,
                moderator_id=state.account_id,
                moderation_status="published",
            )
            
            await callback.answer("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", show_alert=True)
            await dialog_manager.start(model.ContentMenuStates.content_menu, mode=StartMode.RESET_STACK)
        except Exception as err:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
            raise

    # üîô –ù–ê–í–ò–ì–ê–¶–ò–Ø
    
    async def handle_back_to_publication_list(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤"""
        try:
            await dialog_manager.switch_to(model.PublicationDraftStates.publication_list)
        except Exception as err:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
            raise

    async def handle_back_to_content_menu(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω—é"""
        try:
            await dialog_manager.start(
                model.ContentMenuStates.content_menu,
                mode=StartMode.RESET_STACK
            )
        except Exception as err:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
            raise

    # üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    
    async def _get_state(self, dialog_manager: DialogManager) -> model.UserState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if hasattr(dialog_manager.event, 'message') and dialog_manager.event.message:
            chat_id = dialog_manager.event.message.chat.id
        elif hasattr(dialog_manager.event, 'chat'):
            chat_id = dialog_manager.event.chat.id
        else:
            raise ValueError("Cannot extract chat_id from dialog_manager")

        state = await self.state_repo.state_by_id(chat_id)
        if not state:
            raise ValueError(f"State not found for chat_id: {chat_id}")
        return state[0]