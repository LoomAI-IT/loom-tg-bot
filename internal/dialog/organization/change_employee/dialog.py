from aiogram_dialog import Window, Dialog
from aiogram_dialog.widgets.text import Const, Format, Multi, Case
from aiogram_dialog.widgets.kbd import Button, Column, Row, Back, ScrollingGroup, Select, NumberedPager
from aiogram_dialog.widgets.input import TextInput
from sulguk import SULGUK_PARSE_MODE

from internal import interface, model


class ChangeEmployeeDialog(interface.IChangeEmployeeDialog):

    def __init__(
            self,
            tel: interface.ITelemetry,
            change_employee_service: interface.IChangeEmployeeService,
            change_employee_getter: interface.IChangeEmployeeGetter,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.change_employee_service = change_employee_service
        self.change_employee_getter = change_employee_getter

    def get_dialog(self) -> Dialog:
        return Dialog(
            self.get_employee_list_window(),
            self.get_employee_detail_window(),
            self.get_change_permissions_window(),
            self.get_confirm_delete_window(),
            self.get_change_role_window()
        )

    def get_employee_list_window(self) -> Window:
        return Window(
            Multi(
                Const("üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π</b><br><br>"),
                Format("üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {organization_name}<br>"),
                Format("üë§ <b>–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {employees_count}<br><br>"),
                Case(
                    {
                        True: Const("üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b><br>"),
                        False: Const("üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"),
                    },
                    selector="has_search"
                ),
                sep="",
            ),

            # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
            TextInput(
                id="search_employee",
                on_success=self.change_employee_service.handle_search_employee,
            ),

            # –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            ScrollingGroup(
                Select(
                    Format("üë§ {item[name]} ‚Ä¢ {item[role_display]}"),
                    id="employee_select",
                    items="employees",
                    item_id_getter=lambda item: str(item["account_id"]),
                    on_click=self.change_employee_service.handle_select_employee,
                ),
                id="employee_scroll",
                width=1,
                height=6,
                hide_on_single_page=True,
            ),

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            NumberedPager(
                scroll="employee_scroll",
                when="show_pager",
            ),

            Row(
                Button(
                    Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"),
                    id="refresh_list",
                    on_click=self.change_employee_service.handle_refresh_list,
                ),
                Button(
                    Case(
                        {
                            True: Const("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"),
                            False: Const(""),
                        },
                        selector="has_search"
                    ),
                    id="clear_search",
                    on_click=self.change_employee_service.handle_clear_search,
                    when="has_search",
                ),
            ),

            Button(
                Const("‚óÄÔ∏è –ú–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"),
                id="go_to_organization_menu",
                on_click=self.change_employee_service.handle_go_to_organization_menu,
            ),

            state=model.ChangeEmployeeStates.employee_list,
            getter=self.change_employee_getter.get_employee_list_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_employee_detail_window(self) -> Window:
        return Window(
            Multi(
                Const("üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b><br><br>"),
                Const("üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b><br>"),
                Format("‚Ä¢ <b>–ò–º—è:</b> {employee_name}<br>"),
                Format("‚Ä¢ <b>–¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç:</b> @{employee_tg_username}<br>"),
                Format("‚Ä¢ <b>ID –∞–∫–∫–∞—É–Ω—Ç–∞:</b> <code>{account_id}</code><br>"),
                Format("‚Ä¢ <b>–†–æ–ª—å:</b> {role_display}<br>"),
                Format("‚Ä¢ <b>–í –∫–æ–º–∞–Ω–¥–µ —Å:</b> {created_at}<br><br>"),

                Const("üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b><br>"),
                Format("‚Ä¢ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b> {generated_publication_count}<br>"),
                Format("‚Ä¢ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b> {published_publication_count}"),
                Case(
                    {
                        True: Multi(
                            Format("<br>‚Ä¢ <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤ —Ö–æ–¥–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {rejected_publication_count}"),
                            Format("<br>‚Ä¢ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —Ö–æ–¥–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b> {approved_publication_count}"),
                        ),
                        False: Const("")
                    },
                    selector="has_moderated_publications"
                ),

                Const("<br><br>üîê <b>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:</b><br>"),
                Format("{permissions_text}<br>"),

                Case(
                    {
                        True: Const("<br>üëÜ <i>–≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å</i>"),
                        False: Const(""),
                    },
                    selector="is_current_user"
                ),
                sep="",
            ),

            Row(
                Button(
                    Const("‚¨ÖÔ∏è"),
                    id="prev_employee",
                    on_click=self.change_employee_service.handle_navigate_employee,
                    when="has_prev",
                ),
                Button(
                    Format("üìç {current_index} –∏–∑ {total_count}"),
                    id="current_position",
                    on_click=None,
                ),
                Button(
                    Const("‚û°Ô∏è"),
                    id="next_employee",
                    on_click=self.change_employee_service.handle_navigate_employee,
                    when="has_next",
                ),
            ),

            Column(
                Button(
                    Const("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞"),
                    id="edit_permissions",
                    on_click=lambda c, b, d: d.switch_to(model.ChangeEmployeeStates.change_permissions),
                    when="can_edit_permissions",
                ),
                Button(
                    Const("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"),
                    id="change_role",
                    on_click=self.change_employee_service.handle_show_role_change,
                    when="can_change_role",
                ),
                Button(
                    Const("üóëÔ∏è –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã"),
                    id="delete_employee",
                    on_click=lambda c, b, d: d.switch_to(model.ChangeEmployeeStates.confirm_delete),
                    when="can_delete",
                ),

                Back(Const("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥—ã")),
            ),

            state=model.ChangeEmployeeStates.employee_detail,
            getter=self.change_employee_getter.get_employee_detail_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_change_permissions_window(self) -> Window:
        return Window(
            Multi(
                Const("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</b><br><br>"),
                Format("üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {employee_name}<br>"),
                Format("üè∑Ô∏è <b>–†–æ–ª—å:</b> {role_display}<br><br>"),
                Const("üîê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏:</b><br>"),
                Const("üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–æ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è</i><br><br>"),

                Case(
                    {
                        True: Const("‚ö†Ô∏è <b>–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</b><br>"),
                        False: Const(""),
                    },
                    selector="has_changes"
                ),
                sep="",
            ),

            Column(
                Button(
                    Format("{required_moderation_icon} –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"),
                    id="toggle_required_moderation",
                    on_click=self.change_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{autoposting_icon} –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥"),
                    id="toggle_autoposting",
                    on_click=self.change_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{add_employee_icon} –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
                    id="toggle_add_employee",
                    on_click=self.change_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{edit_permissions_icon} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"),
                    id="toggle_edit_permissions",
                    on_click=self.change_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{top_up_balance_icon} –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"),
                    id="toggle_top_up_balance",
                    on_click=self.change_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{social_networks_icon} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç—è–º–∏"),
                    id="toggle_social_networks",
                    on_click=self.change_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{setting_category_icon} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É–±—Ä–∏–∫"),
                    id="toggle_setting_category",
                    on_click=self.change_employee_service.handle_toggle_permission,
                ),
                Button(
                    Format("{setting_organization_icon} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"),
                    id="toggle_setting_organization",
                    on_click=self.change_employee_service.handle_toggle_permission,
                ),
            ),

            Row(
                Button(
                    Const("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
                    id="save_permissions",
                    on_click=self.change_employee_service.handle_save_permissions,
                    when="has_changes",
                ),
                Button(
                    Const("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
                    id="reset_permissions",
                    on_click=self.change_employee_service.handle_reset_permissions,
                    when="has_changes",
                ),
                Back(Const("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")),
            ),

            state=model.ChangeEmployeeStates.change_permissions,
            getter=self.change_employee_getter.get_permissions_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_change_role_window(self) -> Window:
        """–ï–¥–∏–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏"""
        return Window(
            Multi(
                Const("üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b><br><br>"),
                Format("üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: <b>{employee_name}</b><br>"),
                Format("üè∑ –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>{current_role_display}</b><br><br>"),

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –±–ª–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —Ä–æ–ª—å
                Case(
                    {
                        True: Multi(
                            Const("‚úÖ <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å:</b><br>"),
                            Format("üîÑ –ù–æ–≤–∞—è —Ä–æ–ª—å: <b>{selected_role_display}</b><br><br>"),
                            Const("‚ÑπÔ∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b><br>"),
                            Const("‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞<br>"),
                            Const("‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏<br>"),
                            Const("‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ<br><br>"),
                            Const("‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏?</b>"),
                            sep="",
                        ),
                        False: Multi(
                            Const("üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:</b><br>"),
                            Const("<i>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</i><br>"),
                            sep="",
                        ),
                    },
                    selector="has_selected_role"
                ),
                sep="",
            ),

            # –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞)
            Column(
                Select(
                    Format("üîπ {item[display_name]}"),
                    id="role_select",
                    items="available_roles",
                    item_id_getter=lambda item: item["role"],
                    on_click=self.change_employee_service.handle_select_role,
                ),
                when="show_role_list",
            ),

            # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–ª—å –≤—ã–±—Ä–∞–Ω–∞)
            Row(
                Button(
                    Const("‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"),
                    id="confirm_role_change",
                    on_click=self.change_employee_service.handle_confirm_role_change,
                    when="has_selected_role",
                ),
                Button(
                    Const("‚Ü©Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é"),
                    id="reset_role_selection",
                    on_click=self.change_employee_service.handle_reset_role_selection,
                    when="has_selected_role",
                ),
                when="has_selected_role",
            ),

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–∞)
            Back(Const("‚ùå –û—Ç–º–µ–Ω–∞")),

            state=model.ChangeEmployeeStates.change_role,
            getter=self.change_employee_getter.get_role_change_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_confirm_delete_window(self) -> Window:
        return Window(
            Multi(
                Const("‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è</b><br><br>"),
                Format("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã?<br><br>"),
                Format("üë§ <b>–ò–º—è:</b> {employee_name}<br>"),
                Format("üÜî <b>ID:</b> <code>{account_id}</code><br>"),
                Format("üè∑Ô∏è <b>–†–æ–ª—å:</b> {role_display}<br><br>"),
                Const("üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> <i>–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</i><br>"),
                Const("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤—Å–µ–º –µ—ë —Ä–µ—Å—É—Ä—Å–∞–º."),
                sep="",
            ),

            Row(
                Button(
                    Const("üóëÔ∏è –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã"),
                    id="confirm_delete",
                    on_click=self.change_employee_service.handle_delete_employee,
                ),
                Back(Const("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")),
            ),

            state=model.ChangeEmployeeStates.confirm_delete,
            getter=self.change_employee_getter.get_delete_confirmation_data,
            parse_mode=SULGUK_PARSE_MODE,
        )